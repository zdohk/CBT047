./ ADD NAME=SASEREP  0100-89155-89155-1410-00101-00101-00000-JIMLANE
/*
DATA A;
 INFILE SERLOG ;
 INPUT @001   TYPE     IB1.
       @ ;
       IF TYPE='0001....'B THEN CLASS='MACHINE CHECK      ';
  ELSE IF TYPE='0010....'B THEN CLASS='CHANNEL CHECK      ';
  ELSE IF TYPE='0011....'B THEN CLASS='UNIT CHECK (OBR)   ';
  ELSE IF TYPE='0100....'B THEN CLASS='SOFTWARE ERROR     ';
  ELSE IF TYPE='0101....'B THEN CLASS='IPL RECORD         ';
  ELSE IF TYPE='0110....'B THEN CLASS='DDR RECORD         ';
  ELSE IF TYPE='0111....'B THEN CLASS='MISSING INTERRUPT  ';
  ELSE IF TYPE='1000....'B THEN CLASS='SYSTEM TERMINATION ';
  ELSE IF TYPE='1001....'B THEN CLASS='NON-STANDARD MDR   ';
  ELSE IF TYPE='1010....'B THEN CLASS='MACHINE CHECK FRAME';
  ELSE IF TYPE='1011....'B THEN CLASS='CHANNEL CHECK FRAME';

PROC FREQ DATA=WORK.A;
 TABLES CLASS;
 */

OPTIONS OBS=50000;
DATA OBR (KEEP=DATE TIME JOBID CCW DEVTYPE PCUA SENSE LEVEL)
     SFT (KEEP=DATE TIME JOBID PROGRAM ABEND LMOD CSECT)
 ;
 INFILE SERLOG MISSOVER;
 INPUT @001   TYPE     IB1.
       @ ;

  IF TYPE='0011....'B THEN LINK TYPE03;
  IF TYPE='0100....'B THEN LINK TYPE04;
  RETURN;
  TYPE03:
  IF TYPE='0011.11.'B THEN DELETE;  /* VTAM OBR RECORD. */
  INPUT @003   SWITCHES IB2.
        @ ;
  IF SWITCHES='..........0.....'B ;
  IF SWITCHES='.............1..'B THEN DELETE; /* VOLUME DEMOUNT. */
  IF SWITCHES='.........1......'B THEN LEVEL='TEMP'; ELSE LEVEL='PERM';
  INPUT @009   DATE1    PD4.
        @013   TIME     TU4.
        @025   JOBID    $8.
        @033   CCW      $PHEX8.
        @049   DEVDEPC  IB1.
        @053   DEVT1    $PHEX5.
        @057   SDRCNT   IB1.
        @058   PCUA1    $PHEX4.
        @063   SENSCNT  IB2.
        @ ;
  SENSOFF=65+(DEVDEPC*8)+SDRCNT;
  INPUT @SENSOFF SENSE1  $PHEX5.
        @ ;
  DATE=PUT(DATEJUL(DATE1),DATE.);
  PCUA=SUBSTR(PCUA1,4,3);
  DEVTYPE=SUBSTR(DEVT1,1,8);
  SENSE=SUBSTR(SENSE1,1,8);
  IF SUBSTR(SENSE,1,2)='40' & DEVTYPE='1000080E' THEN DELETE;
  IF DEVTYPE='78008000' THEN DEVTYPE='3480  ';
  IF DEVTYPE='78008080' THEN DEVTYPE='3480  ';
  IF DEVTYPE='32108003' THEN DEVTYPE='3420  ';
  IF DEVTYPE='1000080E' THEN DEVTYPE='3800-3';
  IF DEVTYPE='10800809' THEN DEVTYPE='3800-3';
  IF DEVTYPE='1200100B' THEN DEVTYPE='3286  ';
  IF DEVTYPE='12801009' THEN DEVTYPE='3277  ';
  IF DEVTYPE='12201009' THEN DEVTYPE='3278  ';
  IF DEVTYPE='10014100' THEN DEVTYPE='CTCA  ';
  IF DEVTYPE='3010200E' THEN DEVTYPE='3380  ';
  OUTPUT OBR;
  RETURN;

  TYPE04:
  INPUT @004   HDRDS    IB1.
        @009   DATE1    PD4.
        @013   TIME     TU4.
        @025   JOBID    $8.
        @037   ABEND    $PHEX4.
        @121   PROGRAM  $8.
        @325   LMOD     $8.
        @333   CSECT    $8.
        @ ;
  IF HDRDS='1.......'B THEN DELETE;
  IF HDRDS='.1......'B THEN DELETE;
  DATE=PUT(DATEJUL(DATE1),DATE.);
  OUTPUT SFT;
  RETURN;


PROC SUMMARY DATA=WORK.OBR NWAY;
 CLASS DEVTYPE LEVEL;
 VAR TIME;
 OUTPUT OUT=S N=COUNT;
PROC PRINT; ID DEVTYPE; VAR LEVEL COUNT;


PROC PRINT DATA=WORK.OBR;
 ID DATE;
 FORMAT TIME TIME. ;

PROC PRINT DATA=WORK.SFT;
 ID DATE;
 FORMAT TIME TIME. ;
./ ADD NAME=SASGTF   0100-89155-89155-1410-00072-00072-00000-JIMLANE
DATA SVC;
     INFILE IN MISSOVER            LENGTH=LRECL ;
     INPUT    @1   RECTYPE  PIB2. @ ;
     IF RECTYPE = '1111111100000001'B THEN DO ;*(SVC COMPREHENSIVE) ;
        INPUT @3   CLOCK    TODSTAMP8.
              @11  EVENT    PIB2.
              @13  ASCB     PIB4.
              @17  CPUID    PIB2.
              @19  JOBNAME  $CHAR8.
              @27  SVCOPSW  PIB8.
              @29  SVC_NO   PIB2.
              @35  TCB_OLD  PIB4.
              @39  CDENAME  $CHAR8.
              @47  REG15    PIB4.
              @51  REG0     PIB4.
              @55  REG1     PIB4.
              @                    ;
              TIME=TIMEPART(CLOCK) ;

        FORMAT RECTYPE HEX4. ASCB HEX8. CPUID HEX4.

        TIME TIME12. EVENT TCB_OLD SVCOPSW REG1 REG0 REG15 HEX4. ;
        END;



        IF SVC_NO = 6 THEN DO ;
           TYPE='LINK  ' ;
           INPUT @59 EP_NAME $CHAR8.;
           OUTPUT ;
           RETURN ;
        END ;

        IF SVC_NO = 7 THEN DO ;
           TYPE='XCTL  ' ;
           INPUT @59 EP_NAME $CHAR8.;
           OUTPUT ;
           RETURN ;
        END ;


        IF SVC_NO = 8 THEN DO ;
           TYPE='LOAD  ' ;
           INPUT @59 EP_NAME $CHAR8. ;
           OUTPUT ;
           RETURN ;
        END ;

        IF SVC_NO = 9 THEN DO ;
           TYPE='DELETE' ;
           INPUT @59 EP_NAME $CHAR8. ;
           OUTPUT ;
           RETURN ;
        END ;

        IF SVC_NO =18 THEN DO ;
           TYPE='BLDL  ' ;
           INPUT @64 EP_NAME $CHAR8. ;
           OUTPUT ;
           RETURN ;
        END ;

        IF SVC_NO =42 THEN DO ;
           TYPE='ATTACH' ;
           INPUT +29 EP_NAME $CHAR8. ;
           OUTPUT ;
           RETURN ;
        END ;
        DELETE;

PROC FREQ;
 TABLES EP_NAME;
./ ADD NAME=SASHSM   0100-89155-89155-1410-01019-01019-00000-JIMLANE
><       ADD   NAME=HLIST
PROC FORMAT;
 VALUE TYPEFMT
  0='DATA SET (CODE D)      '
  1='USER (CODE U)          '
  2='FREE SPACE ON ML1      '
  4='VOLUME (CODE V)        '
  7='JES3 VOLUME ALLOC COUNT'
 16='STATISTICS OR CONTROL  '
 17='MIGRATED COPY NAME     '
 18='VSAM DATASET ASSOC.    '
 ;
DATA A;
 INFILE MCDS VSAM BUFND=16 BUFNI=16 ;
 INPUT @045 MCHLEN  IB2.
       @047 MCKTYPE IB1.
         ;
PROC FREQ DATA=WORK.A;
 TABLES MCKTYPE;
 FORMAT MCKTYPE TYPEFMT. ;
 TITLE COUNTS OF LOGICAL RECORD TYPES ON THE MCDS;

PROC FREQ DATA=WORK.A;
 TABLES MCKTYPE;
 WEIGHT MCHLEN;
 FORMAT MCKTYPE TYPEFMT. ;
 TITLE PROPORTIONS OF THE TOTAL SPACE TAKEN BY MCDS RECORD TYPES;

PROC DELETE DATA=WORK.A;

DATA ML1 ML2
 MCV
 (KEEP=
 MCVVSN MCVMINAG MCVNMDS MCVNTRKM MCVFRAG
 VOLTYPE FULL AUTOMIGR AUTOBKUP EMPTY SINGLE
 )
 ;

 INFILE MCDS VSAM BUFND=16 BUFNI=16 ;

 INPUT
      @001 TYPE       PIB1.
      @  ;
 IF TYPE=04X THEN DO;
    INPUT
         @002 MCVVSN       $6.
         @073 MCVFLGS      PIB2.
         @123 MCVMINAG     PIB2.
         @125 MCVNMDS      PIB2.
         @127 MCVNTRKM     PIB2.
         @129 MCVFRAG      PIB2.
         @135 MCV3480F     PIB1.
         @  ;

    IF MCVFLGS='10..............'B
    THEN VOLTYPE='PRIMARY';
    IF MCVFLGS='00..............'B
    THEN VOLTYPE='MIGR L1';
    IF MCVFLGS='01..............'B
    THEN VOLTYPE='MIGR L2';
    IF MCVFLGS='.......1........'B
    THEN FULL='YES';
    ELSE FULL='NO ';
    IF MCVFLGS='...1............'B
    THEN AUTOMIGR='NO ';
    ELSE AUTOMIGR='YES';
    IF MCVFLGS='......1.........'B
    THEN AUTOBKUP='YES';
    ELSE AUTOBKUP='NO ';
    IF MCVFLGS='..........1.....'B
    THEN EMPTY='YES';
    ELSE EMPTY='NO ';
    IF MCV3480F='1.......'B
    THEN SINGLE='YES';
    ELSE SINGLE='NO ';
    LABEL
    MCVVSN  ='VOLUME*SERIAL*NUMBER                '
    MCVMINAG='MINIMUM AGE*SELECTED*FOR MIGRATION  '
    MCVNMDS ='DATASETS*PROCESSED*LAST MIGRATION   '
    MCVNTRKM='TRACKS*FREED*LAST MIGRATION         '
    MCVFRAG ='VOLUME*FRAGMENTATION*INDEX          '
    VOLTYPE ='VOLUME*TYPE                         '
    FULL    ='IS VOLUME*FULL?                     '
    AUTOMIGR='AUTOMATIC*MIGRATION*ALLOWED         '
    AUTOBKUP='AUTOMATIC*BACKUP*ALLOWED            '
    EMPTY   ='IS*VOLUME*EMPTY?                    '
    SINGLE  ='3480*SINGLEFILE*FORMAT?             '
    ;
    OUTPUT MCV;
 END;
 INPUT @001 MCDDSN  $44.
       @045 MCHLEN  IB2.
       @047 MCKTYPE IB2.
       @ ;
 IF MCKTYPE=0 THEN DO;
    INPUT @049 MCHTSLU        TODSTAMP8.
          @057 MCHTSCR        TODSTAMP8.
          @065 MCDVSN         $6.
          @071 MCDFLG1        $CHAR1.
          @072 MCDFLG2        IB1.
          @073 MCDCOMPR       IB1.
          @074 MCDRV          IB3.
          @077 MCDDLC1     ?? PD4.
          @081 MCDTLR         IB4.
          @085 MCDDLR1     ?? PD4.
          @089 MCDTLU         IB4.
          @093 MCDDLU      ?? PD4.
          @097 MCDTMIG        IB4.
          @101 MCDDMIG1    ?? PD4.
          @105 MCDDSORG       IB2.
          @107 MCDBLKSZ       IB2.
          @109 MCDKEYLN       IB1.
          @110 MCDRECFM       IB1.
          @111 MCDDSIND       IB1.
          @112 MCDHID         $1.
          @113 MCDSIZE        IB4.
          @117 MCDSIZEB       IB4.
          @121 MCDCSZ         IB4.
          @125 MCDNMIG        IB2.
          @127 MCDDAYS        IB2.
          @129 MCDFRVSN       $6.
          @135 FLASG2         IB1.
          @136 MCDMCL43       $1.
          @137 MCDCTID        $4.
          @141 MCDUCBTY       IB4.
          @145 MCDTRES        IB4.
          @149 MCDDRES     ?? PD4.
          @153 MCDMDEVT       IB4.
          @157 MCDJDAYS       IB1.
          @158 MCDJDATE       IB3.
          @161 MCDJVEXD       IB3.
          @164 MCDPDEP        IB1.
          @165 MCDJCT         IB1.
          @217 MCDEXPD1   ??  PD4.
          @ ;
    IF MCDFLG1='1.......'B;
    IF MCDFLG1='....1...'B THEN SDSP='YES'; ELSE SDSP='NO ';
    IF MCDFLG1='.....1..'B THEN LEVEL='ML2'; ELSE LEVEL='ML1';
    I=INDEX(MCDDSN,'.');
    IF I=0 THEN I=8;
    HIQUAL=SUBSTR(MCDDSN,1,I-1);
    I=INDEX(MCDDSN,' ');
    DO J = 1 TO I;
       IF SUBSTR(MCDDSN,J,1)='.'
       THEN LOWQUAL=SUBSTR(MCDDSN,J+1);
    END;
    DROP I J;
    IF MCDDLC1¬=.
    THEN MCDDLC=PUT(DATEJUL(MCDDLC1),DATE.);
    ELSE MCDDLC='.';
    IF MCDDLR1¬=.
    THEN MCDDLR=PUT(DATEJUL(MCDDLR1),DATE.);
    ELSE MCDDLR='.';
    IF MCDDMIG1¬=.
    THEN MCDDMIG=PUT(DATEJUL(MCDDMIG1),DATE.);
    ELSE MCDDMIG='.';
    IF MCDEXPD1¬=.
    THEN MCDEXPDT=PUT(DATEJUL(MCDEXPDT),DATE.);
    ELSE MCDEXPDT='.';
    AGE=TODAY()-DATEJUL(MCDDLR1);
    FORMAT AGE 3.;
    IF LEVEL='ML1'
    THEN DO;
       IF SDSP='NO'
       THEN ML1TRKS=CEIL(MCDCSZ/18);
       ELSE ML1TRKS=MCDCSZ/18;
    END;
    ELSE ML1TRKS=0;
    IF LEVEL='ML1' THEN OUTPUT ML1;
    IF LEVEL='ML2' THEN OUTPUT ML2;
 END;
    LABEL
    HIQUAL  ='HIGH*LEVEL*QUALIFIER                '
    MCDDSN  ='DATA*SET*NAME                       '
    MCDDLC  ='CREATION*DATE                       '
    MCDDLC  ='DATE*LAST*REFERENCED                '
    MCDDMIG ='DATE*MIGRATED                       '
    MCDVSN  ='MIGRATION*VOLUME*SERIAL             '
    MCDFRVSN='VOLUME*MIGRATED*FROM                '
    SDSP    ='MIGRATED*INTO*SDSP?                 '
    MCDCOMPR='PERCENT*COMPRESSED                  '
    MCDSIZE ='ORIGINAL*SIZE*IN TRKS               '
    ;

PROC PRINT DATA=WORK.MCV SPLIT=*; ID MCVVSN;
 TITLE PRIMARY AND MIGRATION VOLUMES CONTROLLED BY DFHSM;
 TITLE2 ;

PROC SUMMARY DATA=WORK.ML1 NWAY;
 CLASS HIQUAL ;
 VAR MCDCSZ ML1TRKS MCDCOMPR AGE;
 OUTPUT OUT=S N(MCDCSZ)=DATASETS SUM(ML1TRKS)=
 MEAN(MCDCOMPR)=AVGCOMPR MEAN(AGE)=AVGAGE
 SUM(MCDSIZE)=ML0TRKS;
    LABEL
    AVGAGE  ='AVERAGE*DAYS*UNUSED                 '
    ML0TRKS ='TRACKS*USED ON*LEVEL 0              '
    ML1TRKS ='TRACKS*USED ON*LEVEL 1              '
    AVGCOMPR='AVERAGE*PERCENT*COMPRESSION         '
    ;

PROC PRINT DATA=WORK.S;
 ID HIQUAL; VAR DATASETS AVGAGE ML0TRKS ML1TRKS AVGCOMPR;
 TITLE SUMMARY OF MIGRATED DATASETS BY HIGH LEVEL QUALIFIER;
 TITLE2 LEVEL 1 ONLY;
 SUM DATASETS ML0TRKS ML1TRKS;


PROC SUMMARY DATA=WORK.ML2 NWAY;
 CLASS HIQUAL ;
 VAR MCDCSZ ML1TRKS MCDCOMPR AGE;
 OUTPUT OUT=S N(MCDCSZ)=DATASETS SUM(ML1TRKS)=
 MEAN(MCDCOMPR)=AVGCOMPR MEAN(AGE)=AVGAGE
 SUM(MCDSIZE MCDCSZ)=ML0TRKS ML2BLKS;
    LABEL
    AVGAGE  ='AVERAGE*DAYS*UNUSED                 '
    ML0TRKS ='TRACKS*USED ON*LEVEL 0              '
    ML2TRKS ='TRACKS*USED ON*LEVEL 2              '
    AVGCOMPR='AVERAGE*PERCENT*COMPRESSION         '
    ;

PROC PRINT DATA=WORK.S;
 ID HIQUAL; VAR DATASETS AVGAGE ML0TRKS ML2BLKS AVGCOMPR;
 TITLE SUMMARY OF MIGRATED DATASETS BY HIGH LEVEL QUALIFIER;
 TITLE2 LEVEL 2 ONLY;
 SUM DATASETS ML0TRKS ML2BLKS;

PROC SUMMARY DATA=WORK.ML1 NWAY;
 CLASS MCDVSN ;
 VAR MCDCSZ;
 OUTPUT OUT=S N=DATASETS SUM=BLOCKS;

PROC CHART DATA=WORK.S;
 VBAR MCDVSN / TYPE=SUM SUMVAR=DATASETS DISCRETE NOSPACE;
 TITLE SUMMARY OF MIGRATED DATASETS BY ML1 VOLUME;
 TITLE2 ;

PROC CHART DATA=WORK.S;
 VBAR MCDVSN / TYPE=SUM SUMVAR=BLOCKS DISCRETE NOSPACE;
 TITLE SUMMARY OF BLOCKS ON ML1 VOLUMES;
 TITLE2 ;


PROC SUMMARY DATA=WORK.ML2 NWAY;
 CLASS MCDVSN ;
 VAR MCDCSZ;
 OUTPUT OUT=S N=DATASETS SUM=BLOCKS;

PROC CHART DATA=WORK.S;
 VBAR MCDVSN / TYPE=SUM SUMVAR=DATASETS DISCRETE NOSPACE;
 TITLE SUMMARY OF MIGRATED DATASETS BY ML2 VOLUME;
 TITLE2 ;

PROC CHART DATA=WORK.S;
 VBAR MCDVSN / TYPE=SUM SUMVAR=BLOCKS DISCRETE NOSPACE;
 TITLE SUMMARY OF BLOCKS ON ML2 VOLUMES;
 TITLE2 ;

PROC SUMMARY DATA=WORK.ML1 NWAY;
 CLASS SDSP ;
 VAR MCDCSZ;
 OUTPUT OUT=S N=DATASETS SUM=BLOCKS;

PROC CHART DATA=WORK.S;
 VBAR SDSP / TYPE=SUM SUMVAR=DATASETS DISCRETE NOSPACE;
 TITLE SUMMARY OF MIGRATED DATASETS BY SDSP VS NOSDSP;

PROC CHART DATA=WORK.S;
 VBAR SDSP / TYPE=SUM SUMVAR=BLOCKS DISCRETE NOSPACE;
 TITLE SUMMARY OF 2K BLOCKS BY SDSP VS NOSDSP;



PROC SORT DATA=WORK.ML1; BY DESCENDING ML1TRKS;

OPTIONS OBS=50;
PROC PRINT UNIFORM DATA=WORK.ML1;
 ID MCDDSN;
 VAR MCDDLC MCDDLR MCDDMIG
 MCDVSN MCDFRVSN SDSP MCDCOMPR MCDSIZE ML1TRKS;
 SUM MCDSIZE ML1TRKS;
 TITLE LISTING OF LARGEST MIGRATED DATASETS ON LEVEL 1;

OPTIONS OBS=MAX;
PROC SUMMARY DATA=WORK.ML1 NWAY;
 CLASS LOWQUAL;
 VAR ML1TRKS MCDCOMPR;
 OUTPUT OUT=S N(MCDCOMPR)=DATASETS SUM(ML1TRKS)=
 MEAN(MCDCOMPR)= ;

DATA S;
 SET S;
 IF DATASETS GT 9 OR ML1TRKS GT 99;

PROC PRINT DATA=WORK.S;
 ID LOWQUAL; VAR DATASETS ML1TRKS MCDCOMPR;
             SUM DATASETS ML1TRKS;
 TITLE AVERAGE COMPRESSION AMOUNT BY LOWEST LEVEL QUALIFIER;



PROC UNIVARIATE DATA=WORK.ML1 NOPRINT;
 VAR MCDSIZE;
 OUTPUT OUT=S1 N=DATASETS MEAN=AVGSIZE P90=PCTL90
 P95=PCTL95 P99=PCTL99 MAX=LARGEST ;

PROC PRINT DATA=WORK.S1; ID DATASETS;
 TITLE STATISTICS ON ORIGINAL SIZES OF MIGRATED DATASETS;
 TITLE2 IN TRACKS - LEVEL 1;

PROC UNIVARIATE DATA=WORK.ML2 NOPRINT;
 VAR MCDSIZE;
 OUTPUT OUT=S2 N=DATASETS MEAN=AVGSIZE P90=PCTL90
 P95=PCTL95 P99=PCTL99 MAX=LARGEST ;

PROC PRINT DATA=WORK.S2; ID DATASETS;
 TITLE STATISTICS ON ORIGINAL SIZES OF MIGRATED DATASETS;
 TITLE2 IN TRACKS - LEVEL 2;

PROC FORMAT;
 VALUE BTYPFMT
  32='DATA SET (CODE B)      '
  33='DUMP VOLUME            '
  34='DUMP CLASS             '
  36='BACKUP VERSION ENTRY   '
  38='MOVE BACKUP COPY       '
  39='BACKUP MIGRATED DATASET'
  40='VOLUME BACKED UP       '
  41='DUMP GENERATION        '
  44='BACKUP VOLUME          '
  48='CONTROL                '
 ;
DATA A;
 INFILE BCDS VSAM BUFND=16 BUFNI=16 ;
 INPUT @045 MCHLEN  IB2.
       @047 MCKTYPE IB1.
         ;

PROC FREQ DATA=WORK.A;
 TABLES MCKTYPE;
 FORMAT MCKTYPE BTYPFMT. ;
 TITLE COUNTS OF LOGICAL RECORD TYPES ON THE BCDS;
 TITLE2 ;

PROC FREQ DATA=WORK.A;
 TABLES MCKTYPE;
 WEIGHT MCHLEN;
 FORMAT MCKTYPE BTYPFMT. ;
 TITLE PROPORTIONS OF THE TOTAL SPACE TAKEN BY BCDS RECORD TYPES;


DATA
 MCT
 (KEEP=
 MCTVSN MCTDAY MCTTSFBD MCTTSLBD MCTTSLCD
 FULL SINGLE
 )
 MCP
 (KEEP=
 MCPVSN MCPTSLBD MCPTSLBT
 AUTORECL AUTOBKUP VOLTYPE
 )
 ;
 INFILE BCDS VSAM BUFND=16 BUFNI=16 ;
 INPUT
      @001 TYPE       PIB1.
      @  ;
 IF TYPE=2CX THEN DO;
    INPUT
         @002 MCTVSN       $6.
         @083 MCTFLGS      PIB2.
         @105 MCTTSFB1  ?? PD4.
         @113 MCTTSLB1  ?? PD4.
         @127 MCTVOLSQ     PIB2.
         @168 MCTDAY       PIB1.
         @185 MCTTSLC1  ?? PD4.
         @  ;

    IF MCTFLGS='.1..............'B
    THEN FULL='YES';
    ELSE FULL='NO ';
    IF MCTFLGS='.............1..'B
    THEN SINGLE='YES';
    ELSE SINGLE='NO ';
    IF MCTTSFB1¬=.
    THEN MCTTSFBD=PUT(DATEJUL(MCTTSFB1),DATE.);
    ELSE MCTTSFBD='.';
    DROP MCTTSFB1;
    IF MCTTSLB1¬=.
    THEN MCTTSLBD=PUT(DATEJUL(MCTTSLB1),DATE.);
    ELSE MCTTSLBD='.';
    DROP MCTTSLB1;
    IF MCTTSLC1¬=.
    THEN MCTTSLCD=PUT(DATEJUL(MCTTSLC1),DATE.);
    ELSE MCTTSLCD='.';
    DROP MCTTSLC1;
    LABEL
    MCTVSN  ='BACKUP*VOLUME*SERIAL                    '
    MCTDAY  ='BACKUP*CYCLE*DAY                        '
    MCTTSFBD='DATE OF*1ST BKUP*THIS VOL               '
    MCTTSLBD='DATE OF*LAST BKUP*THIS VOL              '
    MCTTSLCD='DATE OF*MOST RECENT*CLEANUP             '
    FULL    ='IS*VOLUME*FULL?                         '
    SINGLE  ='3480*SINGLEFILE*FORMAT?                 '
     ;
    OUTPUT MCT;
 END;

 IF TYPE=28X THEN DO;
    INPUT
         @002 MCPVSN       $6.
         @073 MCPFLGS      PIB2.
         @077 MCPTSLBH     PK1.
         @078 MCPTSLBM     PK1.
         @079 MCPTSLBS     PK2.2
         @081 MCPTSLB1  ?? PD4.
         @ ;
    IF MCPTSLB1¬=.
    THEN MCPTSLBD=PUT(DATEJUL(MCPTSLB1),DATE.);
    ELSE MCPTSLBD='.';
    DROP MCPTSLB1;
    MCPTSLBT=HMS(MCPTSLBH,MCPTSLBM,MCPTSLBS);
    FORMAT MCPTSLBT TIME10.2 ;
    IF MCPFLGS='1...............'B
    THEN VOLTYPE='PRIMARY  ';
    ELSE VOLTYPE='MIGRATION';
    IF MCPFLGS='.......1........'B
    THEN AUTOBKUP='YES';
    ELSE AUTOBKUP='NO ';
    IF MCPFLGS='......1.........'B
    THEN AUTORECL='NO ';
    ELSE AUTORECL='YES';
    LABEL
    MCPVSN  ='SERIAL OF*VOLUME*BACKED UP           '
    MCPTSLBD='DATE OF*MOST RECENT*BACKUP           '
    MCPTSLBT='TIME OF*MOST RECENT*BACKUP           '
    AUTORECL='AUTOMATIC*RECALL*ALLOWED             '
    AUTOBKUP='AUTOMATIC*BACKUP*ALLOWED             '
    VOLTYPE ='VOLUME*TYPE                          '
    ;
    OUTPUT MCP;
 END;

PROC PRINT DATA=WORK.MCT SPLIT=*; ID MCTVSN;
TITLE VOLUMES CONTAINING BACKUP VERSIONS;
TITLE2 ;

PROC PRINT DATA=WORK.MCP SPLIT=*; ID MCPVSN;
TITLE VOLUMES FROM WHICH BACKUPS HAVE BEEN TAKEN;
TITLE2 ;

DATA TTOC
     (KEEP=VOLSER TYPE DATASETS FULL VSAM VALID
     PREVVOL NEXTVOL
     BLOCKS PSWD RCYCLMSG
     );
 INFILE OCDS VSAM BUFND=16 BUFNI=16 EOF=EOFOCDS;
 INPUT @001 TTCKEY  $44.
       @045 MCHLEN  IB2.
       @047 MCKTYPE IB2.
       @049 MCHTSLU        TODSTAMP8.
       @057 MCHTSCR        TODSTAMP8.
       @065 TTCHSTID       $1.
       @066 TTCFFLGS       IB2.
       @069 TTCUNIT        $8.
       @077 TTCNUM         IB2.
       @079 TTCDSNUM       IB2.
       @081 TTCTBLK        IB4.
       @085 TTCVBLK        IB4.
       @089 TTCPREVL       $6.
       @095 TTCSUCVL       $6.
       @101 TTCLFBID       IB4.
       @105 TTCFFBID       IB4.
       @ ;
 RETAIN
           VOLSER TYPE DATASETS FULL VSAM VALID
     PREVVOL NEXTVOL
     BLOCKS PSWD RCYCLMSG
 ;
 IF SUBSTR(TTCKEY,12,4)='0000'
 THEN DO;
    OUTPUT;
    VALID=0;
    VSAM=0;
    DATASETS=0;
    BLOCKS=0;
    VOLSER=SUBSTR(TTCKEY,5,6);
    FULL=REPEAT(' ',3);
    PREVVOL=TTCPREVL;
    NEXTVOL=TTCSUCVL;
    IF TTCFFLGS='1...............'B
    THEN FULL='YES';
    ELSE FULL='NO ';
    IF TTCFFLGS='...1............'B
    THEN PSWD='YES';
    ELSE PSWD='NO ';
    IF TTCFFLGS='....1...........'B
    THEN RCYCLMSG='YES';
    ELSE RCYCLMSG='NO ';
    IF SUBSTR(TTCKEY,2,2) ='SP' THEN TYPE='SPILL       ';
    IF SUBSTR(TTCKEY,2,2) ='UN' THEN TYPE='UNASSIGNED  ';
    IF SUBSTR(TTCKEY,2,2) ='L2' THEN TYPE='LEVEL 2     ';
    IF SUBSTR(TTCKEY,2,2)>='00' THEN TYPE='DAILY BACKUP';
 END;
 DATASETS=DATASETS+TTCDSNUM;
 DO COL=157 TO MCHLEN BY 56;
    INPUT @COL              TTCDSN        $44.
          @COL+044          TTCNBLKS      IB4.
          @COL+048          TTCDLR     ?? PD3.
          @COL+052          TTCEFLGS      IB1.
          @COL+053          TTCEXPDT   ?? PD3.
          @ ;
    IF TTCEFLGS='.1......'B THEN VALID=VALID+1;
    IF TTCEFLGS='1.......'B THEN VSAM=VSAM+1;
    BLOCKS=BLOCKS+TTCNBLKS;
 END;
 RETURN;
 EOFOCDS: OUTPUT;

DATA TTOC;
 SET TTOC;
 IF DATASETS=. THEN DELETE;

PROC PRINT; ID VOLSER;
 SUM DATASETS VALID BLOCKS;
 TITLE TAPE VOLUMES IN USE BY DFHSM;
><       ADD   NAME=HSMFSR
PROC FORMAT;
 VALUE FSRFMT
  1='MIGRATE L0->L1         '
  2='MIGRATE L1->L2         '
  3='MIGRATE L0->L2         '
  4='RECALL L1->L0          '
  5='RECALL L2->L0          '
  6='DELETE MIGRATED DATASET'
  7='DAILY BACKUP           '
  8='SPILL BACKUP           '
  9='RECOVERY               '
 10='RECYCLE BACKUP VOLUME  '
 11='DATA SET DELETION      '
 12='RECYCLE ML2 VOLUME     '
 13='FULL VOLUME DUMP       '
 14='VOLUME/DATASET RESTORE '
 ;

DATA FSR;
  INFILE SMF STOPOVER LENGTH=LENGTH COL=COL RECFM=VBS LRECL=32756
             JFCB=SMFJFCB START=BEGINCPY;
  LENGTH PREVTIME SMFTIME 8 ID MVSXA OFFSMF 2 ;
  FORMAT
         MVSXAFLG                   HEX2.
         SMFJFCB                 $HEX200.
         RUNDATE                 MMDDYY8.
         PREVTIME SMFTIME     DATETIME19.2
         SYSTEM                       $4.
  ;
  IF OFFSMF=. THEN DO;
     IF SUBSTR(SMFJFCB,100,1)='....1...'B  THEN OFFSMF=4;
     ELSE OFFSMF=0;
     BEGINCPY=OFFSMF+1;
     RETAIN BEGINCPY OFFSMF RUNDATE SMFTIME SYSTEM;
     RUNDATE=TODAY();
  END;
  PREVTIME=SMFTIME;
  PREVSYS = SYSTEM;
  IF OFFSMF=4 THEN DO;
    INPUT @5 EOFSTRNG $CHAR7. @;
    IF EOFSTRNG=:'SMF EOF'
    OR EOFSTRNG=:'SMFEOF' THEN STOP;
  END;
  INPUT @1+OFFSMF MVSXAFLG     PIB1.
        @2+OFFSMF ID           PIB1.
        @3+OFFSMF SMFTIME SMFSTAMP8.
       @11+OFFSMF SYSTEM         $4.
  @;
  MVSXA=0;
  IF MVSXAFLG='.....1..'B THEN MVSXA=1;
  IF ID=241;

  INPUT @015+OFFSMF  FSRJBN      $8.
        @023+OFFSMF  FSRRST      SMFSTAMP8.
        @031+OFFSMF  FSRUID      $8.
        @039+OFFSMF  FSRTYPE     PIB1.
        @041+OFFSMF  FSRDSN      $44.
        @085+OFFSMF  FSRTVOL     $6.
        @091+OFFSMF  FSRDEVT     PIB4.
        @095+OFFSMF  FSRFVOL     $6.
        @105+OFFSMF  FSRRC       PIB4.
        @109+OFFSMF  FSRREAS     PIB4.
        @113+OFFSMF  FSRABCC     PIB4.
        @117+OFFSMF  FSRDARC     PIB2.
        @119+OFFSMF  FSRGRP      $8.
        @127+OFFSMF  FSRRACF     IB1.
        @129+OFFSMF  FSRRQN      IB4.
        @133+OFFSMF  FSRDATR     PD4.
        @137+OFFSMF  FSRTIMRH    PK1.
        @138+OFFSMF  FSRTIMRM    PK1.
        @139+OFFSMF  FSRTIMRS    PK2.2
        @141+OFFSMF  FSRTIMSH    PK1.
        @142+OFFSMF  FSRTIMSM    PK1.
        @143+OFFSMF  FSRTIMSS    PK2.2
        @145+OFFSMF  FSRTIMEH    PK1.
        @146+OFFSMF  FSRTIMEM    PK1.
        @147+OFFSMF  FSRTIMES    PK2.2
        @149+OFFSMF  FSRTIMAH    PK1.
        @150+OFFSMF  FSRTIMAM    PK1.
        @151+OFFSMF  FSRTIMAS    PK2.2
        @153+OFFSMF  FSRDLU   ?? PD4.
        @157+OFFSMF  FSRDLM   ?? PD4.
        @161+OFFSMF  FSRBYTR     IB4.
        @165+OFFSMF  FSRBYTW     IB4.
        @169+OFFSMF  FSRTRKR     IB2.
        @171+OFFSMF  FSRTRKW     IB2.
        @173+OFFSMF  FSRDORG     PIB2.
        @175+OFFSMF  FSRFLG2     PIB2.
        @ ;
 IF FSRFLG2='....1...........'B
 THEN INPUT
        @101+OFFSMF  FSRDATE     PD4.
        @ ;
 ELSE INPUT
        @101+OFFSMF  FSRGEN      PIB4.
        @ ;
 INPUT
        @181+OFFSMF  FSRAGE      IB2.
        @183+OFFSMF  FSRRECFM    IB1.
        @184+OFFSMF  FSROPTCD    IB1.
        @237+OFFSMF  FSRNENT1    IB2.
        @239+OFFSMF  FSRNENT2    IB2.
        @ ;
 FSRTIMR=HMS(FSRTIMRH,FSRTIMRM,FSRTIMRS);
 FORMAT FSRTIMR TIME10.2 ;
 DROP FSRTIMRH FSRTIMRM FSRTIMRS ;
 FSRTIMS=HMS(FSRTIMSH,FSRTIMSM,FSRTIMSS);
 FORMAT FSRTIMS TIME10.2 ;
 DROP FSRTIMSH FSRTIMSM FSRTIMSS ;
 FSRTIME=HMS(FSRTIMEH,FSRTIMEM,FSRTIMES);
 FORMAT FSRTIME TIME10.2 ;
 DROP FSRTIMEH FSRTIMEM FSRTIMES ;
 FSRTIMA=HMS(FSRTIMAH,FSRTIMAM,FSRTIMAS);
 FORMAT FSRTIMA TIME10.2 ;
 DROP FSRTIMAH FSRTIMAM FSRTIMAS ;
 DURATION=FSRTIME-FSRTIMR;
 FORMAT DURATION TIME10.2 ;
 WAITING=FSRTIMS-FSRTIMR;
 FORMAT WAITING TIME10.2 ;
 PENDING=FSRTIMA-FSRTIMR;
 FORMAT PENDING TIME10.2 ;
 FUNCTION=PUT(FSRTYPE,FSRFMT.);
 DATE=PUT(DATEPART(SMFTIME),DATE.);
 IF FSRTYPE=1 OR FSRTYPE=3
 THEN DO;
    L0VOL=FSRFVOL;
    L1VOL=FSRTVOL;
    L0BYTES=FSRBYTR;
    L1BYTES=FSRBYTW;
    L0TRKS=FSRTRKR;
    L1TRKS=FSRTRKW;
 END;
 IF FSRTYPE=4
 THEN DO;
    L0VOL=FSRTVOL;
    L1VOL=FSRFVOL;
    L0BYTES=FSRBYTW;
    L1BYTES=FSRBYTR;
    L0TRKS=FSRTRKW;
    L1TRKS=FSRTRKR;
 END;
  LABEL
  FSRDSN  ='DATASET*NAME                            '
  FUNCTION='DFHSM*OPERATION*TYPE                    '
  FSRTIMR ='TIME OF*USER''S*REQUEST                 '
  FSRTVOL ='RECEIVING*VOLUME*SERIAL                 '
  FSRFVOL ='ORIGINAL*VOLUME*SERIAL                  '
  DURATION='TIME TAKEN*TO PROCESS*REQUEST           '
  WAITING ='TIME REQUEST*WAS QUEUED*BY DFHSM        '
  PENDING ='MOUNT*PENDING*TIME                      '
  FSRRC   ='MWE*RETURN*CODE                         '
  L0VOL   ='PRIMARY*VOLUME*SERIAL                   '
  L1VOL   ='LEVEL 1*MIGRATION*VOLUME                '
  L0BYTES ='BYTES*TRANSFERRED*ON PRIMARY            '
  L0TRKS  ='TRACKS*TRANSFERRED*ON PRIMARY           '
  L1BYTES ='BYTES*TRANSFERRED*ON LEVEL 1            '
  L1TRKS  ='TRACKS*TRANSFERRED*ON LEVEL 1           '
  ;

PROC SORT; BY DATE FSRTIMR;

DATA BADFSR;
 SET FSR;
 IF FSRRC > 0 & FSRRC ¬= 2;

PROC PRINT SPLIT=*;
 ID FSRDSN;
 VAR FSRJBN FUNCTION FSRTIMR
 FSRTVOL FSRFVOL DURATION WAITING FSRRC;
 BY DATE;

PROC SORT; BY FUNCTION;

PROC SUMMARY DATA=WORK.BADFSR NWAY;
 CLASS FSRRC;
 BY FUNCTION;
 VAR FSRAGE;
 OUTPUT OUT=S N=COUNT;

PROC PRINT DATA=WORK.S;
 ID FSRRC; VAR COUNT; BY FUNCTION;

PROC DELETE DATA=WORK.S;
PROC DELETE DATA=WORK.BADFSR;


PROC SUMMARY DATA=WORK.FSR NWAY;
 CLASS FUNCTION;
 VAR DURATION WAITING;
 OUTPUT OUT=S MEAN(DURATION WAITING)=AVGRESP AVGQUEUE
              MAX(DURATION WAITING)=MAXRESP MAXQUEUE
              N=COUNT ;
  LABEL
  AVGRESP ='AVERAGE*SERVICE*TIME                    '
  MAXRESP ='MAXIMUM*SERVICE*TIME                    '
  AVGQUEUE='AVERAGE*QUEUE*TIME                      '
  MAXQUEUE='MAXIMUM*QUEUE*TIME                      '
  COUNT   ='TIMES*FUNCTION*EXECUTED                 '
  ;

PROC PRINT DATA=WORK.S SPLIT=*;
 ID FUNCTION;
 VAR COUNT AVGRESP MAXRESP AVGQUEUE MAXQUEUE;
 FORMAT AVGRESP MAXRESP AVGQUEUE MAXQUEUE TIME10.2 ;

PROC SUMMARY DATA=WORK.FSR NWAY;
 CLASS DATE L1VOL;
 VAR L1BYTES L1TRKS;
 OUTPUT OUT=S SUM= ;

PROC PRINT SPLIT=*;
 ID L1VOL; VAR L1BYTES L1TRKS; BY DATE;


PROC SUMMARY DATA=WORK.FSR NWAY;
 CLASS DATE L0VOL;
 VAR L0BYTES L0TRKS;
 OUTPUT OUT=S SUM= ;

PROC PRINT SPLIT=*;
 ID L0VOL; VAR L0BYTES L0TRKS; BY DATE;

PROC SORT DATA=WORK.FSR; BY FUNCTION;

PROC CHART DATA=WORK.FSR;
 VBAR DURATION / TYPE=FREQ NOSPACE
 MIDPOINTS=0.1 0.25 0.5 0.75 1.0 1.5 2 3 4 5 7.5 10 15 30 60 90 120 180
 240 300 600 1200 1800;
 BY FUNCTION;

PROC CHART DATA=WORK.FSR;
 VBAR FSRAGE / TYPE=FREQ NOSPACE DISCRETE;
 BY FUNCTION;

PROC CHART DATA=WORK.FSR;
 VBAR PENDING / TYPE=FREQ NOSPACE DISCRETE;
 BY FUNCTION;

><       ADD   NAME=HSMLOG
PROC FORMAT;
 VALUE FSRFMT
  1='MIGRATE L0->L1         '
  2='MIGRATE L1->L2         '
  3='MIGRATE L0->L2         '
  4='RECALL L1->L0          '
  5='RECALL L2->L0          '
  6='DELETE MIGRATED DATASET'
  7='DAILY BACKUP           '
  8='SPILL BACKUP           '
  9='RECOVERY               '
 10='RECYCLE BACKUP VOLUME  '
 11='DATA SET DELETION      '
 12='RECYCLE ML2 VOLUME     '
 13='FULL VOLUME DUMP       '
 14='VOLUME/DATASET RESTORE '
 ;

 VALUE MWEFMT
  0='RETURN THE QCT POINTER       '
  1='START UP DFHSM               '
  2='SHUTDOWN DFHSM               '
  3='RECALL A DATASET             '
  4='UNUSED                       '
  5='RECOVER A DATASET OR VOLUME  '
  6='MIGRATE A DATASET OR VOLUME  '
  7='BACKUP A DATASET OR VOLUME   '
  8='READ A CONTROL DATASET RECORD'
  9='PROCESS COMMAND TEXT         '
 10='POST AN MWE COMPLETE         '
 11='PURGE THE MWE                '
 12='DELETE A MIGRATED DATASET    '
 ;

 VALUE LOGFMT
  1='DFHSM STARTUP                         '
  2='OPERATOR COMMAND RECEIVED             '
  3='OUTPUT MESSAGE TO OPERATOR            '
  4='MWE RECEIVED BY ARCCTL                '
  5='RECALL OR DELETION STARTED            '
  6='RECALL OR DELETION ENDED              '
  7='MIGRATION STARTED                     '
  8='MIGRATION ENDED                       '
  9='ARCERP PROCESSING PERFORMED           '
 10='SUBTASK ABNORMAL END                  '
 11='MWE RECEIVED BY MIGRATION SUBTASK     '
 12='DFHSM SHUTDOWN                        '
 13='MWE COMPLETED                         '
 14='STATISTICS RECORD                     '
 15='CONTROL DATASET UPDATE OR NEW ENTRY   '
 16='CONTROL DATASET ENTRY DELETED         '
 17='BACKUP OF DATASET STARTED             '
 18='BACKUP OF DATASET ENDED               '
 19='RECOVERY OF BACKUP VERSION STARTED    '
 20='RECOVERY OF BACKUP VERSION ENDED      '
 21='DATASET DELETION OR RETIREMENT STARTED'
 22='DELETION ENDED                        '
 23='RECYCLE STARTED                       '
 24='RECYCLE ENDED                         '
 ;
DATA OPERATNS(KEEP=DATE TIME FUNCTION UID DSNAME VSN RC REAS
                   KBYTES)
     CMDLOG(KEEP=DATE TIME UID COMMAND)
     MSGLOG(KEEP=DATE TIME TO TEXT)
     DSR   (KEEP=DATE TIME DSRIPL DSRABEND DSRSHUT DSRNMWE DSREJST
               DSREVENT         DSRNVMG DSRNVBU
               PL1NDS PL1NTRKR PL1NTRKW
               PL1NBYTR PL1NBYTW PL1NDSF PL1NVOL PL1NSYS PL1TAGE
               PL1TTINQ PL1TTWV PL1TTINP PL1TTOT
               L1PNDS L1PNTRKR L1PNTRKW
               L1PNBYTR L1PNBYTW L1PNDSF L1PNVOL L1PNSYS L1PTAGE
               L1PTTINQ L1PTTWV L1PTTINP L1PTTOT
     )
     ;
 INFILE HSMLOG ;
 INPUT  @1   MRECL     IB2.
  @ ;
 I = 3;
 DO WHILE (I <= MRECL);
  MWEFUNC=.;
  MWEDSN=REPEAT(' ',44);
  MWEUID=REPEAT(' ',8);
  UID=REPEAT(' ',8);
  VSN=REPEAT(' ',6);
  DATE=.;
  TIME=.;
  FUNCTION=REPEAT(' ',38);
  DSNAME=REPEAT(' ',44);
  INPUT
        @I    MLOGL     IB2.
        @I+2  MLOGID    IB1.
        @I+3  MLOGFLGS  IB1.
        @I+4  MLOGJUL   PD4.
        @I+8  MLOGHH    PK1.
        @I+9  MLOGMM    PK1.
        @I+10 MLOGSS    PK1.
        @I+11 MLOGTT    PK1.
     @ ;
  DATE=DATEJUL(MLOGJUL);
  TIME=HMS(MLOGHH,MLOGMM,MLOGSS);
  IF MLOGID=03 THEN LINK ID03;
  IF MLOGID=04 THEN LINK ID04;
  IF MLOGID=06 THEN LINK ID06;
  IF MLOGID=08 THEN LINK ID06;
  IF MLOGID=14 THEN LINK ID14;
  I = I+MLOGL;
 END;
 RETURN;
 ID03: /* MESSAGE TEXT.          */
 INPUT @I+16   TO       $8.
       @ ;
 INPUT @I+24   TEXTL    IB1.
       @ ;
 TEXTL=TEXTL-1;
 INPUT @I+25   MSGTEXT  $VARYING132. TEXTL
       @ ;
 TEXT=PUT(MSGTEXT,$110.);
 OUTPUT MSGLOG;
 RETURN;
 ID04: /* ARCCTL RECEIVES MWE.   */
 INPUT @I+12   MWEFWD   IB4.
       @I+16   MWEBWD   IB4.
       @I+20   MWESPN   IB1.
       @I+21   MWELEN   IB3.
       @I+24   MWEFSR   IB4.
       @I+28   MWETSTIM IB4.
       @I+32   MWETSDAT PD4.
       @I+36   MWEFUNC  IB1.
       @I+40   MWEUID   $8.
       @ ;
 IF MWEFUNC¬=9 THEN RETURN;
 INPUT @I+152  MWECMDL  IB2.
       @ ;
 MWECMDL=MWECMDL-4;
 INPUT @I+156  MWECMDT  $VARYING80. MWECMDL
       @ ;
 COMMAND=PUT(MWECMDT,$80.);
 UID=MWEUID;
 OUTPUT CMDLOG;
 RETURN;
 ID06: /* RECALL/DELETE ENDED. */
 INPUT @I+30   FSRJBN   $8.
       @I+54   FSRTYPE  IB1.
       @I+56   FSRDSN   $44.
       @I+100  FSRTVOL  $6.
       @I+110  FSRFVOL  $6.
       @I+120  FSRRC    IB4.
       @I+124  FSRREAS  IB4.
       @I+176  FSRBYTR  IB4.
       @I+180  FSRBYTW  IB4.
       @ ;
 FUNCTION=PUT(FSRTYPE,FSRFMT.);
 UID=FSRJBN;
 DSNAME=FSRDSN;
 IF FSRTYPE=4 OR FSRTYPE=5 OR FSRTYPE=9
 THEN VSN=FSRTVOL;
 ELSE VSN=FSRFVOL;
 RC=FSRRC;
 REAS=FSRREAS;
 KBYTES=(FSRBYTR+FSRBYTW)/1024;
 OUTPUT OPERATNS;
 RETURN;
 ID14: /* STATISTICS RECORD. */
 INPUT @I+12   DSRKEY   $44.
       @ ;
 IF SUBSTR(DSRKEY,2,3)¬='DSR' THEN RETURN;
 INPUT @I+076  DSRIPL   IB4.
       @I+080  DSRABEND IB4.
       @I+084  DSRSHUT  IB4.
       @I+088  DSRNMWE  IB4.
       @I+096  DSREJST1 IB4.
       @I+112  DSREVENT IB4.
       @I+120  DSRNVMG  IB2.
       @I+124  DSRNVBU  IB2.
       @I+196  PL1NDS   IB2.
       @I+204  PL1NTRKR IB4.
       @I+208  PL1NTRKW IB4.
       @I+212  PL1NBYTR IB4.
       @I+216  PL1NBYTW IB4.
       @I+220  PL1NDSF  IB2.
       @I+222  PL1NVOL  IB2.
       @I+224  PL1NSYS  IB2.
       @I+226  PL1TAGE  IB2.
       @I+228  PL1TTINQ IB4.
       @I+232  PL1TTWV  IB4.
       @I+236  PL1TTINP IB4.
       @I+240  PL1TTOT  IB4.
       @I+192+196 L1PNDS   IB2.
       @I+192+204 L1PNTRKR IB4.
       @I+192+208 L1PNTRKW IB4.
       @I+192+212 L1PNBYTR IB4.
       @I+192+216 L1PNBYTW IB4.
       @I+192+220 L1PNDSF  IB2.
       @I+192+222 L1PNVOL  IB2.
       @I+192+224 L1PNSYS  IB2.
       @I+192+226 L1PTAGE  IB2.
       @I+192+228 L1PTTINQ IB4.
       @I+192+232 L1PTTWV  IB4.
       @I+192+236 L1PTTINP IB4.
       @I+192+240 L1PTTOT  IB4.
       @ ;
 DSREJST1=DSREJST1/1000;
 HH=DSREJST1/(60*60);
 MM=(DSREJST1/60)-(HH*60);
 SS=DSREJST1-((MM*60)+(HH*60*60));
 DSREJST=HMS(HH,MM,SS);
 OUTPUT DSR;
 RETURN;

PROC SORT DATA=WORK.OPERATNS; BY FUNCTION DATE TIME;

PROC PLOT DATA=WORK.OPERATNS;
 BY FUNCTION DATE;
 PLOT KBYTES*TIME;
 FORMAT DATE DATE. ;
 FORMAT TIME TIME. ;

PROC SUMMARY DATA=WORK.OPERATNS;
 CLASS FUNCTION DATE;
 VAR TIME;
 OUTPUT OUT=S N(TIME)=COUNT;

PROC PRINT DATA=WORK.S;
 ID FUNCTION; VAR DATE COUNT;
 FORMAT DATE DATE. ;

/*

PROC PRINT  DATA=WORK.OPERATNS; ID DATE;
 VAR TIME FUNCTION RC REAS UID VSN DSNAME;
 FORMAT DATE DATE. ;
 FORMAT TIME TIME. ;

PROC PRINT  DATA=WORK.CMDLOG; ID UID;
 VAR DATE TIME COMMAND;
 FORMAT DATE DATE. ;
 FORMAT TIME TIME. ;
 */

/*
PROC SORT DATA=WORK.MSGLOG; BY DATE;

PROC PRINT  DATA=WORK.MSGLOG; ID TIME;
 BY DATE;
 VAR TO TEXT;
 FORMAT DATE DATE. ;
 FORMAT TIME TIME. ;
 */

PROC PRINT  DATA=WORK.DSR;    ID DATE;
 FORMAT DATE DATE. ;
 FORMAT TIME TIME. ;
 FORMAT DSREJST TIME. ;
./ ADD NAME=SASRMF79 0100-89155-89155-1410-00193-00193-00000-JIMLANE
OPTIONS OBS=MAX;
DATA
 ASD  (KEEP=DATE TIME JOB ESFRAMES CSFRAMES)
 SRCS (KEEP=DATE TIME AFC HIUIC ASMQ)
 SPAG (KEEP=DATE TIME MIGAGE ESRTE ESFRAMES MIGRTE PAGEINS PAGEOUTS)
 ;
  INFILE SMF MISSOVER LENGTH=LENGTH COL=COL RECFM=VBS LRECL=32756
             JFCB=SMFJFCB START=BEGINCPY;
  LENGTH                             OFFSMF 2 ;
  FORMAT
         SMFJFCB                 $HEX200.
  ;
  IF OFFSMF=. THEN DO;
     IF SUBSTR(SMFJFCB,100,1)='....1...'B  THEN OFFSMF=4;
     ELSE OFFSMF=0;
     BEGINCPY=OFFSMF+1;
     RETAIN BEGINCPY OFFSMF         ;
  END;
  IF OFFSMF=4 THEN DO;
    INPUT @5 EOFSTRNG $CHAR7. @;
    IF EOFSTRNG=:'SMF EOF'
    OR EOFSTRNG=:'SMFEOF' THEN STOP;
  END;
  INPUT @2+OFFSMF TYPE         PIB1. @;
  IF TYPE=79;

  INPUT @1+OFFSMF
       SMF79FLG    IB1.   /* HEADER FLAG BYTE                       */
       SMF79RTY    IB1.   /* RECORD TYPE                            */
       TIMESTMP    SMFSTAMP8.
       SMF79SID    $4.    /* SYSTEM ID FROM INSTALLATION            */
       SMF79SSI    $4.    /* SUBSYSTEM ID (RMF)                     */
       SMF79STY    IB2.   /* SUBTYPE                                */
       SMF79TRN    IB2.   /* NUMBER OF TRIPLETS IN THIS RECORD      */
       SMF79AAA    IB2.   /* RESERVED                               */
       SMF79PRS    IB4.   /* OFFSET TO RMF PRODUCT SECTION          */
       SMF79PRL    IB2.   /* LENGTH OF RMF PRODUCT SECTION          */
       SMF79PRN    IB2.   /* NUMBER OF RMF PRODUCT SECTIONS         */
       SMF79MCS    IB4.   /* OFFSET TO MONITOR II CONTROL SECTION   */
       SMF79MCL    IB2.   /* LENGTH OF MONITOR II CONTROL SECTION   */
       SMF79MCN    IB2.   /* NUMBER OF MONITOR II CONTROL SECTION   */
       SMF79ASS    IB4.   /* OFFSET TO DATA SECTION                 */
       SMF79ASL    IB2.   /* LENGTH OF DATA SECTION                 */
       SMF79ASN    IB2.   /* NUMBER OF DATA SECTION                 */
       SMF79DCS    IB4.   /* OFFSET TO DATA CONTROL SECTION         */
       SMF79DCL    IB2.   /* LENGTH OF DATA CONTROL SECTION         */
       SMF79DCN    IB2.   /* NUMBER OF DATA CONTROL SECTION         */
       SMF79QSS    IB4.   /* OFFSET TO I/O QUEUING GLBL.SECT.       */
       SMF79QSL    IB2.   /* LENGTH OF I/O QUEUING GLBL.SECT.       */
       SMF79QSN    IB2.   /* NUMBER OF I/O QUEUING GLBL.SECT.       */
 @ ;

 DATE=DATEPART(TIMESTMP);
 TIME=TIMEPART(TIMESTMP);
 FORMAT DATE DATE. ;
 FORMAT TIME TIME. ;

 IF SMF79STY=1 THEN DO;
  I=SMF79ASS-4;
  J=SMF79ASL;
  K=SMF79ASN;
  DO L=1 TO K;
   INPUT @1+OFFSMF+I
       R791ASID    IB2.   /* ADDRESS SPACE IDENTIFIER               */
       R791JBN     $8.    /* NAME OF JOB                            */
       R791DMN     IB2.   /* DOMAIN NUMBER                          */
       R791NPG     IB2.   /* PERFORMANCE GROUP                      */
       R791PGP     IB2.   /* PERFORMANCE GROUP PERIOD               */
       R791TTOD    IB4.   /* REAL TIME INTO TRANSACTION             */
       R791CL      $2.    /* CURRENT LOCATION                       */
       R791TAS     IB2.   /* TYPE OF USER                           */
       R791SRC     $2.    /* REASON LAST SWAP OUT                   */
       R791DP      IB2.   /* DISPATCHER PRIORITY                    */
       R791SEQN    IB2.   /* RESERVED                         @S1C  */
       R791FMCT    IB2.   /* NUMBER OF REAL STORAGE FRAMES          */
       R791WSS     IB2.   /* WORKING SET AT LAST SWAP IN            */
       R791SWC     IB2.   /* TRANSACTION SWAP COUNT                 */
       R791SWMR    IB2.   /* SRM WORKLOAD RECOM VALUE               */
       R791SCRV    IB2.   /* SRM PROCESSOR RECOM VALUE              */
       R791SIOC    IB2.   /* SRM I/O RECOM VALUE                    */
       R791WMS     IB4.   /* SRM SSERVICE FOR THE CURRENT           */
       R791TCPU    IB4.   /* CPU (TCB+SRB) FOR CURRENT JOB STEP IN  */
       R791SSRV    IB2.   /* SRM STORAGE RECOMMENDATION VALUE       */
       R791ES      IB2.   /* NUMBER OF EXT. STORAGE SLOTS     @P2A  */
       R791ESSL    IB4.   /* AVAILABLE FOR FUTURE USE         @P2A  */
       @;
       IF R791DMN=6
       THEN DO;
          JOB=R791JBN;
          CSFRAMES=R791FMCT;
          ESFRAMES=R791ES;
          OUTPUT ASD;
       END;
       I=I+J;
  END;
 END;


 IF SMF79STY=3 THEN DO;
  I=SMF79ASS-4;
  J=SMF79ASL;
  K=SMF79ASN;
  DO L=1 TO K;
   INPUT @1+OFFSMF+I
       R793AFC     IB2.   /* NUMBER OF AVAILABLE FRAMES              */
       R793CRI     IB2.   /* HIGH UIC COUNT                          */
       R793SQA     IB2.   /* NUMBER OF SQA FRAMES                    */
       R793CMNF    IB2.   /* NUMBER OF COMMON (LPA+CSA)              */
       R793CMFF    IB2.   /* NUMBER OF COMMON (LPA+CSA)              */
       R793PRFX    IB2.   /* NUMBER OF PRIVATE FIXED FRAMES          */
       R793CPUU    IB2.   /* PROCESSOR UTILIZATION (0-101)           */
       R793DQ      IB2.   /* LENGTH OF ASCB READY QUEUE              */
       R793INC     IB2.   /* NUMBER OF ADDRESS SPACES IN STORAGE     */
       R793OUTU    IB2.   /* NUMBER OF ADDRESS SPACES OUT OF         */
       R793LCU     IB2.   /* RESERVED                                */
       R793ASMQ    IB2.   /* SRM MEASURE OF ASM QUEUE LENGTH         */
       R793LPAF    IB2.   /* NUMBER OF LPA PAGEABLE FRAMES           */
       R793CSAF    IB2.   /* NUMBER OF CSA PAGEABLE FRAMES           */
       R793LPFX    IB2.   /* NUMBER OF LPA FIXED FRAMES              */
       R793CSFX    IB2.   /* NUMBER OF CSA FIXED FRAMES              */
       R793LSQA    IB2.   /* NUMBER OF LSQA FRAME                    */
       R793NLQF    IB2.   /* NUMBER OF PRIVATE NON LSQA FIX FRAMES   */
       R793LOUT    IB2.   /* NUMBER OF ADDRESS SPACES LOGICALLY      */
       @;
       AFC=R793AFC;
       HIUIC=R793CRI;
       ASMQ=R793ASMQ;
       OUTPUT SRCS;
       I=I+J;
  END;
 END;

 IF SMF79STY=4 THEN DO;
  I=SMF79ASS-4;
  J=SMF79ASL;
  K=SMF79ASN;
  DO L=1 TO K;
   INPUT @1+OFFSMF+I
       R794CMNI    IB4.   /* SYSTEM COMMON (LPA+CSA) PAGES IN        */
       R794CMNO    IB4.   /* SYSTEM COMMON (CSA) PAGES OUT           */
       R794CMNR    IB4.   /* SYSTEM COMMON (LPA+CSA) PAGES           */
       R794SWPO    IB4.   /* NUMBER OF SWAPS (OUT)            @P1C   */
       R794PSPI    IB4.   /* NUMBER OF PAGES SWAPPED IN              */
       R794PSPO    IB4.   /* NUMBER OF PAGES SWAPPED OUT             */
       R794PRVI    IB4.   /* NUMBER OF PRIVATE PAGES                 */
       R794PRVO    IB4.   /* NUMBER OF PRIVATE PAGES                 */
       R794PRVR    IB4.   /* NUMBER OF PRIVATE PAGES                 */
       R794VIO     IB4.   /* NUMBER OF VIO PAGES (IN+OUT)            */
       R794AFC     IB2.   /* NUMBER AVAILABLE FRAMES                 */
       R794CRI     IB2.   /* HIGH UIC COUNT                          */
       R794ACRI    IB2.   /* AVERAGE OF HIGH UIC COUNT               */
       R794RV1     IB2.   /* RESERVED                                */
       R794LPAI    IB4.   /* SYSTEM LPA PAGES IN          @G537NLS   */
       R794CSAI    IB4.   /* SYSTEM CSA PAGES OUT         @G537NLS   */
       R794LPAR    IB4.   /* SYSTEM LPA PAGES RECLAIMED   @G537NLS   */
       R794CSAR    IB4.   /* SYSTEM CSA PAGES RECLAIMED   @G537NLS   */
       R794TWSS    IB2.   /* TARGET WORKING SETSIZE FOR THE COMMON   */
       R794MAGE    IB2.   /* MIGRATION AGE                           */
       R794ERTE    IB4.   /* NO. PAGES TO EXT. STORAGE               */
       R794EVAL    IB4.   /* NO. OF EXTENDED STORAGE SLOTS           */
       R794ESSL    IB4.   /* AVAILABLE FOR FUTURE USE                */
       R794MRTE    IB4.   /* NO. OF PAGES MIGRATED FROM              */
       MIGAGE      IB4.   /* !!!!! */
       @;
 /*    MIGAGE=R794MAGE; */
       PAGEINS=(R794PRVI-LAG1(R794PRVI))/(TIME-LAG1(TIME));
       PAGEOUTS=(R794PRVO-LAG1(R794PRVO))/(TIME-LAG1(TIME));
       ESRTE=(R794ERTE-LAG1(R794ERTE))/(TIME-LAG1(TIME));
       ESFRAMES=R794EVAL;
       MIGRTE=(R794MRTE-LAG1(R794MRTE))/(TIME-LAG1(TIME));
       OUTPUT SPAG;
       I=I+J;
  END;
 END;

PROC SORT DATA=WORK.ASD; BY JOB DATE TIME;
PROC PLOT DATA=WORK.ASD;
 PLOT CSFRAMES*TIME='C' ESFRAMES*TIME='E'  / OVERLAY;
 BY JOB DATE;

PROC PLOT DATA=WORK.SPAG;
 PLOT
       MIGAGE*TIME
       ESRTE*TIME
       ESFRAMES*TIME
       MIGRTE*TIME
       PAGEINS*TIME
       PAGEOUTS*TIME
       ;


PROC PRINT DATA=WORK.SRCS; ID DATE;
PROC PRINT DATA=WORK.SPAG; ID DATE;
./ ADD NAME=SASSYSLG 0100-89155-89155-1410-00736-00736-00000-JIMLANE
><       ADD   NAME=SPOOL

DATA A;
 INFILE SYSLOG
 LENGTH=LENGTH MISSOVER;
 INPUT     HCLCC      $CHAR1.  /* CARRIAGE CONTROL                   */
           HCLRECTP   $CHAR1.  /* RECORD TYPE                        */
 @ ;
 IF HCLRECTP='X'
  | HCLRECTP='S'
  | HCLRECTP='L'
  | HCLRECTP='D'
  | HCLRECTP='E' THEN DELETE;
 INPUT     HCLREQTP   $CHAR1.  /* REQUEST TYPE                       */
           HCLROUTC   HEX4.    /* ROUTING CODES                      */
           HCLRV1     $CHAR1.  /* BLANK                              */
           HCLSYSID   $CHAR8.  /* SYSTEM ID                          */
           HCLRV2     $CHAR1.  /* BLANK                              */
           HCLYEAR    $CHAR2.  /* YEAR                  YY           */
           HCLDAY     $CHAR3.  /* DAY OF YEAR             DDD        */
           HCLRV3     $CHAR1.  /* BLANK                              */
           HCLHR      $CHAR2.  /* HOURS                 HH           */
           HCLCOLN1   $CHAR1.  /* COLON                   :          */
           HCLMIN     $CHAR2.  /* MINUTES                  MM        */
           HCLCOLN2   $CHAR1.  /* COLON                      :       */
           HCLSEC     $CHAR2.  /* SECONDS                     SS     */
           HCLDOT1    $CHAR1.  /* DECIMAL POINT                 .    */
           HCLTHSEC   $CHAR2.  /* .01 SECONDS                    TH  */
           HCLRV4     $CHAR1.  /* BLANK                              */
           HCLJOBID   $CHAR8.  /* ID OF JOB THAT ISSUED MESSAGE -    */
           HCLRV5     $CHAR1.  /* BLANK                              */
           HCLREQFL   $CHAR8.  /* USER EXIT/MPF REQUEST FLAGS        */
           HCLRV6     $CHAR1.  /* BLANK                              */
           HCLWTOR    $CHAR1.  /* @ FOR USER WTOR.                   */
           @ ;



 IF HCLRECTP='W'               /* WTOR. */
 THEN DO;
    INPUT HCLRV7 $CHAR3. @ ;
    LENGTH=LENGTH-3;
 END;
 LENGTH=LENGTH-54;
 INPUT
           HCLTEXT $VARYING78. LENGTH
           ;

    MSGID=SUBSTR(HCLTEXT,1,9);
    MSGID=SCAN(MSGID,1,' ');
    IF SUBSTR(MSGID,1,1)='+'
    THEN MSGID=SUBSTR(MSGID,2);
 DATE=HCLYEAR || '.' || HCLDAY;
 TIME=HCLHR || ':' || HCLMIN || ':' || HCLSEC || '.' || HCLTHSEC;
 IF MSGID='$HASP646';

    PERCENT=SCAN(SUBSTR(HCLTEXT,10,3),1,' ');
    DAY=DATEJUL(HCLYEAR || HCLDAY);
    X=HCLHR || ':' || HCLMIN || ':' || HCLSEC;
    T=INPUT(X,TIME8.);
    KEEP PERCENT DAY T;

PROC SORT; BY DAY;

PROC PLOT;
 PLOT PERCENT*T;
 FORMAT DAY DATE7. ;
 FORMAT T TIME. ;
 BY DAY;

><       ADD   NAME=SYSLOG
OPTIONS OBS=50000;

DATA A;
 INFILE SYSLOG
 LENGTH=LENGTH MISSOVER;
 INPUT     HCLCC      $CHAR1.  /* CARRIAGE CONTROL                   */
           HCLRECTP   $CHAR1.  /* RECORD TYPE                        */
 @ ;
 IF HCLRECTP='X'
  | HCLRECTP='S'
  | HCLRECTP='L'
  | HCLRECTP='D'
  | HCLRECTP='E' THEN DELETE;
 INPUT     HCLREQTP   $CHAR1.  /* REQUEST TYPE                       */
           HCLROUTC   HEX4.    /* ROUTING CODES                      */
           HCLRV1     $CHAR1.  /* BLANK                              */
           HCLSYSID   $CHAR8.  /* SYSTEM ID                          */
           HCLRV2     $CHAR1.  /* BLANK                              */
           HCLYEAR    $CHAR2.  /* YEAR                  YY           */
           HCLDAY     $CHAR3.  /* DAY OF YEAR             DDD        */
           HCLRV3     $CHAR1.  /* BLANK                              */
           HCLHR      $CHAR2.  /* HOURS                 HH           */
           HCLCOLN1   $CHAR1.  /* COLON                   :          */
           HCLMIN     $CHAR2.  /* MINUTES                  MM        */
           HCLCOLN2   $CHAR1.  /* COLON                      :       */
           HCLSEC     $CHAR2.  /* SECONDS                     SS     */
           HCLDOT1    $CHAR1.  /* DECIMAL POINT                 .    */
           HCLTHSEC   $CHAR2.  /* .01 SECONDS                    TH  */
           HCLRV4     $CHAR1.  /* BLANK                              */
           HCLJOBID   $CHAR8.  /* ID OF JOB THAT ISSUED MESSAGE -    */
           HCLRV5     $CHAR1.  /* BLANK                              */
           HCLREQFL   $CHAR8.  /* USER EXIT/MPF REQUEST FLAGS        */
           HCLRV6     $CHAR1.  /* BLANK                              */
           HCLWTOR    $CHAR1.  /* @ FOR USER WTOR.                   */
           @ ;


 R01=.; R02=.; R03=.; R04=.; R05=.; R06=.; R07=.; R08=.;
 R09=.; R10=.; R11=.; R12=.; R13=.; R14=.; R15=.; R16=.;

 IF HCLROUTC='1...............'B THEN R01=1;
 IF HCLROUTC='.1..............'B THEN R02=1;
 IF HCLROUTC='..1.............'B THEN R03=1;
 IF HCLROUTC='...1............'B THEN R04=1;
 IF HCLROUTC='....1...........'B THEN R05=1;
 IF HCLROUTC='.....1..........'B THEN R06=1;
 IF HCLROUTC='......1.........'B THEN R07=1;
 IF HCLROUTC='.......1........'B THEN R08=1;
 IF HCLROUTC='........1.......'B THEN R09=1;
 IF HCLROUTC='.........1......'B THEN R10=1;
 IF HCLROUTC='..........1.....'B THEN R11=1;
 IF HCLROUTC='...........1....'B THEN R12=1;
 IF HCLROUTC='............1...'B THEN R13=1;
 IF HCLROUTC='.............1..'B THEN R14=1;
 IF HCLROUTC='..............1.'B THEN R15=1;
 IF HCLROUTC='...............1'B THEN R16=1;

 IF HCLRECTP='W'               /* WTOR. */
 THEN DO;
    INPUT HCLRV7 $CHAR3. @ ;
    LENGTH=LENGTH-3;
 END;
 LENGTH=LENGTH-54;
 INPUT
           HCLTEXT $VARYING78. LENGTH
           ;

 IF (HCLRECTP='M' AND R15=1)
  | (R11=1 AND SUBSTR(HCLTEXT,1,1)='+')   /* WTL */
  | (R01=1 AND SUBSTR(HCLTEXT,1,1)='+')   /* WTL */
  | (R10=1 AND HCLREQTP=' ')              /* OLTEP. */
  THEN DELETE;
 IF HCLREQTP¬=' ' & HCLREQTP¬='R'
 THEN MSGID='*NONE*   ';
 ELSE DO;
    MSGID=SUBSTR(HCLTEXT,1,9);
    MSGID=SCAN(MSGID,1,' ');
    IF SUBSTR(MSGID,1,1)='+'
    THEN MSGID=SUBSTR(MSGID,2);
 END;
 IF (SUBSTR(MSGID,1,1)='$' AND SUBSTR(MSGID,2,4)¬='HASP')
  | SUBSTR(MSGID,1,2)='S '
  | (HCLRECTP='W' AND HCLWTOR='@')
  | (SUBSTR(MSGID,1,1) GE '0' AND SUBSTR(MSGID,1,1) LE '9')
  | SUBSTR(MSGID,1,2)='# '
  | SUBSTR(MSGID,1,2)='V '
  | SUBSTR(MSGID,1,1)='&'
  | SUBSTR(MSGID,1,1)='*'
  | SUBSTR(MSGID,1,1)='"'
  | SUBSTR(MSGID,1,1)='-'
  | (R02=1 AND R11=1 AND SUBSTR(HCLTEXT,1,1)='+')
 THEN MSGID='*NONE*   ';
 IF R12=1
 THEN MSGID='*JES328X*';
 DATE=HCLYEAR || '.' || HCLDAY;
 TIME=HCLHR || ':' || HCLMIN || ':' || HCLSEC || '.' || HCLTHSEC;


PROC SUMMARY;
 VAR R01 R02 R03 R04 R05 R06 R07 R08 R09 R10 R11 R12 R13 R14 R15 R16;
 OUTPUT OUT=S N=;

PROC PRINT;

DATA B;
 SET A;
 IF MSGID='$HASP000'
  | MSGID='$HASP308'
  | MSGID='$HASP309'
  | MSGID='$HASP317'
  | MSGID='$HASP524'
  | MSGID='$HASP604'
  | MSGID='$HASP632'
 THEN DELETE;
 IF HCLREQTP='C' THEN DELETE;  /* COMMAND TEXT.     */
 IF HCLREQTP='R' THEN DELETE;  /* COMMAND RESPONSE. */
 IF HCLROUTC='0000000000000000'B THEN DELETE;
 IF HCLROUTC='0100000000000000'B THEN DELETE; /* MSTR CONSOLE INFO */
 IF HCLROUTC='0000001000000000'B THEN DELETE; /* UNIT RECORD POOL. */
 IF HCLROUTC='0000001100000000'B THEN DELETE;
 IF HCLROUTC='0000000100000000'B
  & SUBSTR(MSGID,1,3)¬='IST'     THEN DELETE;
 IF HCLROUTC='0000000000010000'B THEN DELETE; /* RC=12. JES328X. */
 IF HCLROUTC='0100000010000000'B THEN DELETE; /* SECURITY INFO. */
 IF HCLROUTC='0000000000100000'B THEN DELETE; /* PGMR INFORMATION. */
 IF HCLROUTC='0010000000000000'B THEN DELETE; /* TAPE LIBRARY.     */
 IF HCLROUTC='0010100000000000'B THEN DELETE; /* TAPE LIBRARY.     */
 IF HCLROUTC='0100000000100000'B THEN DELETE; /* RC=(2,11)         */
 IF HCLROUTC='0000000000001000'B THEN DELETE; /* TLMSII            */
 IF HCLROUTC='0100100000000000'B THEN DELETE; /* TLMSII. RC=(2,5)  */


PROC FREQ ORDER=FREQ;
 TABLES MSGID;

PROC PRINT UNIFORM;
 ID DATE; VAR TIME HCLTEXT;

><       ADD   NAME=SYSLOG1
OPTIONS OBS=5000;

DATA A;
 INFILE SYSLOG
 LENGTH=LENGTH MISSOVER;
 INPUT     HCLCC      $CHAR1.  /* CARRIAGE CONTROL                   */
           HCLRECTP   $CHAR1.  /* RECORD TYPE                        */
 @ ;
 IF HCLRECTP='X'
  | HCLRECTP='S'
  | HCLRECTP='L'
  | HCLRECTP='D'
  | HCLRECTP='E' THEN DELETE;
 INPUT     HCLREQTP   $CHAR1.  /* REQUEST TYPE                       */
           HCLROUTC   HEX4.    /* ROUTING CODES                      */
           HCLRV1     $CHAR1.  /* BLANK                              */
           HCLSYSID   $CHAR8.  /* SYSTEM ID                          */
           HCLRV2     $CHAR1.  /* BLANK                              */
           HCLYEAR    $CHAR2.  /* YEAR                  YY           */
           HCLDAY     $CHAR3.  /* DAY OF YEAR             DDD        */
           HCLRV3     $CHAR1.  /* BLANK                              */
           HCLHR      $CHAR2.  /* HOURS                 HH           */
           HCLCOLN1   $CHAR1.  /* COLON                   :          */
           HCLMIN     $CHAR2.  /* MINUTES                  MM        */
           HCLCOLN2   $CHAR1.  /* COLON                      :       */
           HCLSEC     $CHAR2.  /* SECONDS                     SS     */
           HCLDOT1    $CHAR1.  /* DECIMAL POINT                 .    */
           HCLTHSEC   $CHAR2.  /* .01 SECONDS                    TH  */
           HCLRV4     $CHAR1.  /* BLANK                              */
           HCLJOBID   $CHAR8.  /* ID OF JOB THAT ISSUED MESSAGE -    */
           HCLRV5     $CHAR1.  /* BLANK                              */
           HCLREQFL   $CHAR8.  /* USER EXIT/MPF REQUEST FLAGS        */
           HCLRV6     $CHAR1.  /* BLANK                              */
           HCLWTOR    $CHAR1.  /* @ FOR USER WTOR.                   */
           @ ;


 R01=.; R02=.; R03=.; R04=.; R05=.; R06=.; R07=.; R08=.;
 R09=.; R10=.; R11=.; R12=.; R13=.; R14=.; R15=.; R16=.;

 IF HCLROUTC='1...............'B THEN R01=1;
 IF HCLROUTC='.1..............'B THEN R02=1;
 IF HCLROUTC='..1.............'B THEN R03=1;
 IF HCLROUTC='...1............'B THEN R04=1;
 IF HCLROUTC='....1...........'B THEN R05=1;
 IF HCLROUTC='.....1..........'B THEN R06=1;
 IF HCLROUTC='......1.........'B THEN R07=1;
 IF HCLROUTC='.......1........'B THEN R08=1;
 IF HCLROUTC='........1.......'B THEN R09=1;
 IF HCLROUTC='.........1......'B THEN R10=1;
 IF HCLROUTC='..........1.....'B THEN R11=1;
 IF HCLROUTC='...........1....'B THEN R12=1;
 IF HCLROUTC='............1...'B THEN R13=1;
 IF HCLROUTC='.............1..'B THEN R14=1;
 IF HCLROUTC='..............1.'B THEN R15=1;
 IF HCLROUTC='...............1'B THEN R16=1;

 IF HCLRECTP='W'               /* WTOR. */
 THEN DO;
    INPUT HCLRV7 $CHAR3. @ ;
    LENGTH=LENGTH-3;
 END;
 LENGTH=LENGTH-54;
 INPUT
           HCLTEXT $VARYING78. LENGTH
           ;

 IF (HCLRECTP='M' AND R15=1)
  | (R11=1 AND SUBSTR(HCLTEXT,1,1)='+')   /* WTL */
  | (R01=1 AND SUBSTR(HCLTEXT,1,1)='+')   /* WTL */
  | (R10=1 AND HCLREQTP=' ')              /* OLTEP. */
  THEN DELETE;
 IF HCLREQTP¬=' ' & HCLREQTP¬='R'
 THEN MSGID='*NONE*   ';
 ELSE DO;
    MSGID=SUBSTR(HCLTEXT,1,9);
    MSGID=SCAN(MSGID,1,' ');
    IF SUBSTR(MSGID,1,1)='+'
    THEN MSGID=SUBSTR(MSGID,2);
 END;
 IF (SUBSTR(MSGID,1,1)='$' AND SUBSTR(MSGID,2,4)¬='HASP')
  | SUBSTR(MSGID,1,2)='S '
  | (HCLRECTP='W' AND HCLWTOR='@')
  | (SUBSTR(MSGID,1,1) GE '0' AND SUBSTR(MSGID,1,1) LE '9')
  | SUBSTR(MSGID,1,2)='# '
  | SUBSTR(MSGID,1,2)='V '
  | SUBSTR(MSGID,1,1)='&'
  | SUBSTR(MSGID,1,1)='*'
  | SUBSTR(MSGID,1,1)='"'
  | SUBSTR(MSGID,1,1)='-'
  | (R02=1 AND R11=1 AND SUBSTR(HCLTEXT,1,1)='+')
 THEN MSGID='*NONE*   ';
 IF R12=1
 THEN MSGID='*JES328X*';
 DATE=HCLYEAR || '.' || HCLDAY;
 TIME=HCLHR || ':' || HCLMIN || ':' || HCLSEC || '.' || HCLTHSEC;


PROC SUMMARY;
 VAR R01 R02 R03 R04 R05 R06 R07 R08 R09 R10 R11 R12 R13 R14 R15 R16;
 OUTPUT OUT=S N=;

PROC PRINT;

DATA B;
 SET A;
 IF MSGID='*NONE*'
  | MSGID='*JES328X*'
  | MSGID='         '
  | MSGID='$HASP000'
  | MSGID='$HASP094'
  | MSGID='$HASP097'
  | MSGID='$HASP100'
  | MSGID='$HASP101'
  | MSGID='$HASP104'
  | MSGID='$HASP110'
  | MSGID='$HASP119'
  | MSGID='$HASP120'
  | MSGID='$HASP125'
  | MSGID='$HASP150'
  | MSGID='$HASP160'
  | MSGID='$HASP170'
  | MSGID='$HASP185'
  | MSGID='$HASP190'
  | MSGID='$HASP200'
  | MSGID='$HASP203'
  | MSGID='$HASP250'
  | MSGID='$HASP301'
  | MSGID='$HASP308'
  | MSGID='$HASP309'
  | MSGID='$HASP317'
  | MSGID='$HASP318'
  | MSGID='$HASP373'
  | MSGID='$HASP375'
  | MSGID='$HASP395'
  | MSGID='$HASP396'
  | MSGID='$HASP398'
  | MSGID='$HASP520'
  | MSGID='$HASP524'
  | MSGID='$HASP534'
  | MSGID='$HASP530'
  | MSGID='$HASP540'
  | MSGID='$HASP604'
  | MSGID='$HASP608'
  | MSGID='$HASP628'
  | MSGID='$HASP632'
  | MSGID='$HASP688'
  | MSGID='$HASP900'
  | MSGID='IDMS'
  | MSGID='LXXM1SEP'
  | MSGID='PPIFMISA'
  | MSGID='SIM001I'
  | MSGID='SIM201L'
  | MSGID='SIM203L'
  | MSGID='SIM205L'
  | MSGID='SIM210L'
  | MSGID='SIM214L'
  | MSGID='SIM215L'
  | MSGID='ACFAE139'
  | MSGID='CSV003I'
  | MSGID='CSV300I'
  | MSGID='DTM1460I'
  | MSGID='DTM1461I'
  | MSGID='ACF79506'
  | MSGID='ACFAE067'
  | MSGID='IOS003A'
  | MSGID='IKJ56644I'
  | MSGID='READY'
  | MSGID='END'
  | MSGID='ACF99900'
  | MSGID='ACFAE089'
  | MSGID='ACFAE088'
  | MSGID='ACFAE087'
  | MSGID='ACFAE086'
  | MSGID='ACFAE085'
  | MSGID='ACFAE084'
  | MSGID='ACFAE083'
  | MSGID='ACFAE082'
  | MSGID='ACFAE081'
  | MSGID='ACFAE080'
  | MSGID='ACFAE077'
  | MSGID='ACFAE076'
  | MSGID='ACFAE075'
  | MSGID='ACFAE074'
  | MSGID='ACFAE073'
  | MSGID='ACFAE072'
  | MSGID='ACFAE066'
  | MSGID='ACFAE065'
  | MSGID='ACFAE064'
  | MSGID='ACFAE063'
  | MSGID='ACFAE062'
  | MSGID='ACFAE061'
  | MSGID='ACFAE060'
  | MSGID='ACFAE059'
  | MSGID='ACFAE058'
  | MSGID='ACFAE057'
  | MSGID='ACFAE056'
  | MSGID='ACFAE055'
  | MSGID='ACFAE054'
  | MSGID='ACFAE053'
  | MSGID='ACFAE052'
  | MSGID='ACFAE051'
  | MSGID='ACFAE050'
  | MSGID='ACFAE049'
  | MSGID='ACFAE048'
  | MSGID='ACFAE047'
  | MSGID='ACFAE046'
  | MSGID='ACFAE045'
  | MSGID='ACFAE044'
  | MSGID='ACFAE043'
  | MSGID='ACFAE042'
  | MSGID='ACFAE041'
  | MSGID='ACFAE040'
  | MSGID='ACFAE039'
  | MSGID='ACFAE038'
  | MSGID='ACFAE037'
  | MSGID='ACFAE036'
  | MSGID='ACFAE035'
  | MSGID='ACFAE034'
  | MSGID='ACFAE033'
  | MSGID='ACFAE032'
  | MSGID='ACFAE031'
  | MSGID='ACFAE030'
  | MSGID='ACFAE019'
  | MSGID='ACFAE018'
  | MSGID='ACFAE017'
  | MSGID='ACFAE016'
  | MSGID='ACFAE131'
  | MSGID='ACTL13I'
  | MSGID='CAT2291D'
  | MSGID='CAT2295D'
  | MSGID='CAT9006I'
  | MSGID='CAT9007I'
  | MSGID='IEA989I'
  | MSGID='IEA995I'
  | MSGID='IEC130I'
  | MSGID='IEC161I'
  | MSGID='IEC501A'
  | MSGID='IEC502E'
  | MSGID='IEC507D'
  | MSGID='IEC705I'
  | MSGID='IEC999I'
  | MSGID='IEE400I'
  | MSGID='IEE600I'
  | MSGID='IEF091I'
  | MSGID='IEF099I'
  | MSGID='IEF196'
  | MSGID='IEF196I'
  | MSGID='IEF233A'
  | MSGID='IEF234E'
  | MSGID='IEF236I'
  | MSGID='IEF237I'
  | MSGID='IEF238D'
  | MSGID='IEF244I'
  | MSGID='IEF247I'
  | MSGID='IEF403I'
  | MSGID='IEF404I'
  | MSGID='IEF125I'
  | MSGID='IEF126I'
  | MSGID='IEF433D'
  | MSGID='IEF450I'
  | MSGID='IEF452I'
  | MSGID='IEF471E'
  | MSGID='IEF489I'
  | MSGID='IEF677I'
  | MSGID='IEF861I'
  | MSGID='IEF863I'
  | MSGID='IST670I'
  | MSGID='IST464I'
  | MSGID='U11-626'
  | MSGID='U11-656'
  | MSGID='UCC7.579'
  | SUBSTR(MSGID,1,4)='VSN='
  | SUBSTR(MSGID,1,6)='SCIUSB'
 THEN DELETE;


PROC FREQ ORDER=FREQ;
 TABLES MSGID;

PROC PRINT UNIFORM;
 ID DATE; VAR TIME HCLTEXT;

DATA C;
 SET A;
 IF MSGID='$HASP646'
 THEN DO;
    PERCENT=SCAN(SUBSTR(HCLTEXT,10,3),1,' ');
    DAY=DATEJUL(HCLYEAR || HCLDAY);
    X=HCLHR || ':' || HCLMIN || ':' || HCLSEC;
    T=INPUT(X,TIME8.);
    KEEP DAY T PERCENT;
    OUTPUT;
 END;
 DELETE;

PROC SORT; BY DAY;

PROC PRINT;

PROC PLOT;
 PLOT PERCENT*T;
 FORMAT DAY DATE7. ;
 FORMAT T TIME. ;
 BY DAY;

DATA C;
 SET A;
IF HCLREQTP NE 'C' THEN DELETE;
IF SUBSTR(HCLJOBID,7,2)='01' THEN HCLJOBID= '*MASTER*';
IF SUBSTR(HCLJOBID,7,2)='02' THEN HCLJOBID= 'A BACKUP';
IF SUBSTR(HCLJOBID,7,2)='03' THEN HCLJOBID= 'B BACKUP';
IF SUBSTR(HCLJOBID,7,2)='05' THEN HCLJOBID= 'TAPEAREA';
IF SUBSTR(HCLJOBID,7,2)='06' THEN HCLJOBID= '  PRINT ';
IF SUBSTR(HCLJOBID,7,2)='08' THEN HCLJOBID= '   C/C  ';
IF SUBSTR(HCLJOBID,7,2)='10' THEN HCLJOBID= '   C/C  ';
IF SUBSTR(HCLJOBID,7,2)='11' THEN HCLJOBID= '   C/C  ';
IF SUBSTR(HCLJOBID,7,2)='12' THEN HCLJOBID= ' LIBRARY';
IF SUBSTR(HCLJOBID,1,3)='TSU' THEN HCLJOBID= '  TSU   ';
IF SUBSTR(HCLJOBID,1,3)='JOB' THEN DELETE;
COMTYP = '        ';
*BREAK JES2 COMMANDS DOWN BY COMMAND TYPE;
IF SUBSTR(HCLTEXT,1,2)='$A' THEN COMTYP='$RELEASE';
IF SUBSTR(HCLTEXT,1,2)='$B' THEN COMTYP='$BKSPACE';
IF SUBSTR(HCLTEXT,1,2)='$C' THEN COMTYP='$CANCEL ';
IF SUBSTR(HCLTEXT,1,2)='$D' THEN COMTYP='$DISPLAY';
IF SUBSTR(HCLTEXT,1,2)='$E' THEN COMTYP='$RESTART';
IF SUBSTR(HCLTEXT,1,2)='$F' THEN COMTYP='$FORWARD';
IF SUBSTR(HCLTEXT,1,2)='$G' THEN COMTYP='$GDISPLY';
IF SUBSTR(HCLTEXT,1,2)='$H' THEN COMTYP='$HOLD   ';
IF SUBSTR(HCLTEXT,1,2)='$I' THEN COMTYP='$INTRUPT';
IF SUBSTR(HCLTEXT,1,2)='$L' THEN COMTYP='$LIST   ';
IF SUBSTR(HCLTEXT,1,2)='$M' THEN COMTYP='$MLTSPOL';
IF SUBSTR(HCLTEXT,1,2)='$N' THEN COMTYP='$REPEAT ';
IF SUBSTR(HCLTEXT,1,2)='$O' THEN COMTYP='$HELD DS';
IF SUBSTR(HCLTEXT,1,2)='$P' THEN COMTYP='$DRAIN  ';
IF SUBSTR(HCLTEXT,1,2)='$R' THEN COMTYP='$ROUTE  ';
IF SUBSTR(HCLTEXT,1,2)='$S' THEN COMTYP='$START  ';
IF SUBSTR(HCLTEXT,1,2)='$T' THEN COMTYP='$SET    ';
IF SUBSTR(HCLTEXT,1,3)='$TR' THEN COMTYP='$TRACE  ';
IF SUBSTR(HCLTEXT,1,2)='$V' THEN COMTYP='$MVS CMD';
IF SUBSTR(HCLTEXT,1,2)='$Z' THEN COMTYP='$HALT   ';
*BREAK DOWN MVS O/S COMMANDS BY COMMAND;
IF SUBSTR(HCLTEXT,1,1)='C' THEN COMTYP='CANCEL ';
IF SUBSTR(HCLTEXT,1,2)='CD' THEN COMTYP='CNGDUMP';
IF SUBSTR(HCLTEXT,1,8)='CHNGDUMP' THEN COMTYP='CNGDUMP';
IF SUBSTR(HCLTEXT,1,2)='CF' THEN COMTYP='CONFIG ';
IF SUBSTR(HCLTEXT,1,6)='CONFIG' THEN COMTYP='CONFIG ';
IF SUBSTR(HCLTEXT,1,1)='K' THEN COMTYP='CONSOLE';
IF SUBSTR(HCLTEXT,1,6)='CONTROL' THEN COMTYP='CONSOLE';
IF SUBSTR(HCLTEXT,1,1)='D' THEN COMTYP='DISPLAY';
IF SUBSTR(HCLTEXT,1,7)='DISPLAY' THEN COMTYP='DISPLAY';
IF SUBSTR(HCLTEXT,1,4)='DUMP' THEN COMTYP='DUMP   ';
IF SUBSTR(HCLTEXT,1,2)='DS' THEN COMTYP='DUMP DS';
IF SUBSTR(HCLTEXT,1,6)='DUMPDS' THEN COMTYP='DUMP DS';
IF SUBSTR(HCLTEXT,1,5)='FORCE' THEN COMTYP='FORCE  ';
IF SUBSTR(HCLTEXT,1,1)='Z' THEN COMTYP='HALT   ';
IF SUBSTR(HCLTEXT,1,4)='HALT' THEN COMTYP='HALT   ';
IF SUBSTR(HCLTEXT,1,1)='L' THEN COMTYP='LOG CMD';
IF SUBSTR(HCLTEXT,1,3)='LOG' THEN COMTYP='LOG CMD';
IF SUBSTR(HCLTEXT,1,1)='F' THEN COMTYP='MODIFY ';
IF SUBSTR(HCLTEXT,1,6)='MODIFY' THEN COMTYP='MODIFY ';
IF SUBSTR(HCLTEXT,1,1)='M' THEN COMTYP='MOUNT  ';
IF SUBSTR(HCLTEXT,1,5)='MOUNT' THEN COMTYP='MOUNT  ';
IF SUBSTR(HCLTEXT,1,2)='MN' THEN COMTYP='MONITOR';
IF SUBSTR(HCLTEXT,1,7)='MONITOR' THEN COMTYP='MONITOR';
IF SUBSTR(HCLTEXT,1,2)='MR' THEN COMTYP='ROUTMSG';
IF SUBSTR(HCLTEXT,1,5)='MSGRT' THEN COMTYP='ROUTMSG';
IF SUBSTR(HCLTEXT,1,2)='PA' THEN COMTYP='PAGEADD';
IF SUBSTR(HCLTEXT,1,7)='PAGEADD' THEN COMTYP='PAGEADD';
IF SUBSTR(HCLTEXT,1,6)='QUIESE' THEN COMTYP='QUIESE ';
IF SUBSTR(HCLTEXT,1,1)='R' THEN COMTYP='REPLY';
IF SUBSTR(HCLTEXT,1,5)='REPLY' THEN COMTYP='REPLY';
IF SUBSTR(HCLTEXT,1,1)='S' THEN COMTYP='START  ';
IF SUBSTR(HCLTEXT,1,5)='START' THEN COMTYP='START  ';
IF SUBSTR(HCLTEXT,1,2)='SE' THEN COMTYP='SENDMSG';
IF SUBSTR(HCLTEXT,1,4)='SEND' THEN COMTYP='SENDMSG';
IF SUBSTR(HCLTEXT,1,1)='T' THEN COMTYP='SET CMD';
IF SUBSTR(HCLTEXT,1,3)='SET' THEN COMTYP='SET CMD';
IF SUBSTR(HCLTEXT,1,2)='SS' THEN COMTYP='SET SMF';
IF SUBSTR(HCLTEXT,1,6)='SETSMF' THEN COMTYP='SET SMF';
IF SUBSTR(HCLTEXT,1,2)='SL' THEN COMTYP='SLIPCMD';
IF SUBSTR(HCLTEXT,1,4)='SLIP' THEN COMTYP='SLIPCMD';
IF SUBSTR(HCLTEXT,1,1)='P' THEN COMTYP='STOP   ';
IF SUBSTR(HCLTEXT,1,4)='STOP' THEN COMTYP='STOP   ';
IF SUBSTR(HCLTEXT,1,2)='PM' THEN COMTYP='STOPMON';
IF SUBSTR(HCLTEXT,1,6)='STOPMN' THEN COMTYP='STOPMON';
IF SUBSTR(HCLTEXT,1,2)='PT' THEN COMTYP='TRACMSG';
IF SUBSTR(HCLTEXT,1,6)='STOPTR' THEN COMTYP='TRACMSG';
IF SUBSTR(HCLTEXT,1,1)='G' THEN COMTYP='OPRSWAP';
IF SUBSTR(HCLTEXT,1,4)='SWAP' THEN COMTYP='OPRSWAP';
IF SUBSTR(HCLTEXT,1,1)='I' THEN COMTYP='SMFSWAP';
IF SUBSTR(HCLTEXT,1,6)='SWITCH' THEN COMTYP='SMFSWAP';
IF SUBSTR(HCLTEXT,1,5)='TRACE' THEN COMTYP='TRACE  ';
IF SUBSTR(HCLTEXT,1,2)='TR' THEN COMTYP='TRACK  ';
IF SUBSTR(HCLTEXT,1,5)='TRACK' THEN COMTYP='TRACK  ';
IF SUBSTR(HCLTEXT,1,1)='U' THEN COMTYP='UNLOAD ';
IF SUBSTR(HCLTEXT,1,6)='UNLOAD' THEN COMTYP='UNLOAD ';
IF SUBSTR(HCLTEXT,1,1)='V' THEN COMTYP='VARYCMD';
IF SUBSTR(HCLTEXT,1,4)='VARY' THEN COMTYP='VARYCMD';
IF SUBSTR(HCLTEXT,1,1)='W' THEN COMTYP='WRITLOG';
IF SUBSTR(HCLTEXT,1,8)='WRITELOG' THEN COMTYP='WRITLOG';
IF COMTYP = '        ' THEN DELETE;
*MAKE SOME SENSE OF ALL THIS NONSENSE;
PROC FREQ FORMCHAR='|----+|---' ORDER=FREQ;
TABLES COMTYP HCLJOBID/ NOPERCENT NOROW NOCOL;
TABLES COMTYP*HCLJOBID/ NOPERCENT NOROW NOCOL;
><       ADD   NAME=SYSLOG2

DATA A;
 INFILE SYSLOG
 LENGTH=LENGTH MISSOVER;
 INPUT     HCLCC      $CHAR1.  /* CARRIAGE CONTROL                   */
           HCLRECTP   $CHAR1.  /* RECORD TYPE                        */
 @ ;
 IF HCLRECTP='X'
  | HCLRECTP='S'
  | HCLRECTP='L'
  | HCLRECTP='D'
  | HCLRECTP='E' THEN DELETE;
 INPUT     HCLREQTP   $CHAR1.  /* REQUEST TYPE                       */
           HCLROUTC   HEX4.    /* ROUTING CODES                      */
           HCLRV1     $CHAR1.  /* BLANK                              */
           HCLSYSID   $CHAR8.  /* SYSTEM ID                          */
           HCLRV2     $CHAR1.  /* BLANK                              */
           HCLYEAR    $CHAR2.  /* YEAR                  YY           */
           HCLDAY     $CHAR3.  /* DAY OF YEAR             DDD        */
           HCLRV3     $CHAR1.  /* BLANK                              */
           HCLHR      $CHAR2.  /* HOURS                 HH           */
           HCLCOLN1   $CHAR1.  /* COLON                   :          */
           HCLMIN     $CHAR2.  /* MINUTES                  MM        */
           HCLCOLN2   $CHAR1.  /* COLON                      :       */
           HCLSEC     $CHAR2.  /* SECONDS                     SS     */
           HCLDOT1    $CHAR1.  /* DECIMAL POINT                 .    */
           HCLTHSEC   $CHAR2.  /* .01 SECONDS                    TH  */
           HCLRV4     $CHAR1.  /* BLANK                              */
           HCLJOBID   $CHAR8.  /* ID OF JOB THAT ISSUED MESSAGE -    */
           HCLRV5     $CHAR1.  /* BLANK                              */
           HCLREQFL   HEX8.    /* USER EXIT/MPF REQUEST FLAGS        */
           HCLRV6     $CHAR1.  /* BLANK                              */
           HCLWTOR    $CHAR1.  /* @ FOR USER WTOR.                   */
           @ ;


 R01=.; R02=.; R03=.; R04=.; R05=.; R06=.; R07=.; R08=.;
 R09=.; R10=.; R11=.; R12=.; R13=.; R14=.; R15=.; R16=.;

 IF HCLROUTC='1...............'B THEN R01=1;
 IF HCLROUTC='.1..............'B THEN R02=1;
 IF HCLROUTC='..1.............'B THEN R03=1;
 IF HCLROUTC='...1............'B THEN R04=1;
 IF HCLROUTC='....1...........'B THEN R05=1;
 IF HCLROUTC='.....1..........'B THEN R06=1;
 IF HCLROUTC='......1.........'B THEN R07=1;
 IF HCLROUTC='.......1........'B THEN R08=1;
 IF HCLROUTC='........1.......'B THEN R09=1;
 IF HCLROUTC='.........1......'B THEN R10=1;
 IF HCLROUTC='..........1.....'B THEN R11=1;
 IF HCLROUTC='...........1....'B THEN R12=1;
 IF HCLROUTC='............1...'B THEN R13=1;
 IF HCLROUTC='.............1..'B THEN R14=1;
 IF HCLROUTC='..............1.'B THEN R15=1;
 IF HCLROUTC='...............1'B THEN R16=1;

      IF HCLREQFL='...............................1'B
 THEN SUPPRESS='MPF ';
 ELSE IF HCLREQFL='.............................1..'B
 THEN SUPPRESS='TSSO';
 ELSE SUPPRESS='NO  ';

 IF HCLRECTP='W'               /* WTOR. */
 THEN DO;
    INPUT HCLRV7 $CHAR3. @ ;
    LENGTH=LENGTH-3;
 END;
 LENGTH=LENGTH-54;
 INPUT
           HCLTEXT $VARYING78. LENGTH
           ;

 IF (HCLRECTP='M' AND R15=1)
  | (R11=1 AND SUBSTR(HCLTEXT,1,1)='+')   /* WTL */
  | (R01=1 AND SUBSTR(HCLTEXT,1,1)='+')   /* WTL */
  | (R10=1 AND HCLREQTP=' ')              /* OLTEP. */
  THEN DELETE;
 IF HCLREQTP¬=' '
  | HCLRECTP='M'
 THEN MSGID='*NONE*   ';
 ELSE DO;
    MSGID=SUBSTR(HCLTEXT,1,9);
    MSGID=SCAN(MSGID,1,' ');
    IF SUBSTR(MSGID,1,1)='+'
    THEN MSGID=SUBSTR(MSGID,2);
 END;
 IF (SUBSTR(MSGID,1,1)='$' AND SUBSTR(MSGID,2,4)¬='HASP')
  | SUBSTR(MSGID,1,2)='S '
  | (HCLRECTP='W' AND HCLWTOR='@')
  | (SUBSTR(MSGID,1,1) GE '0' AND SUBSTR(MSGID,1,1) LE '9')
  | SUBSTR(MSGID,1,2)='# '
  | SUBSTR(MSGID,1,2)='V '
  | SUBSTR(MSGID,1,1)='&'
  | SUBSTR(MSGID,1,1)='*'
  | SUBSTR(MSGID,1,1)='"'
  | SUBSTR(MSGID,1,1)='-'
  | (R02=1 AND R11=1 AND SUBSTR(HCLTEXT,1,1)='+')
 THEN MSGID='*NONE*   ';
 IF R12=1
 THEN MSGID='*JES328X*';
 DATE=HCLYEAR || '.' || HCLDAY;
 TIME=HCLHR || ':' || HCLMIN || ':' || HCLSEC || '.' || HCLTHSEC;


PROC SUMMARY;
 VAR R01 R02 R03 R04 R05 R06 R07 R08 R09 R10 R11 R12 R13 R14 R15 R16;
 OUTPUT OUT=S N=;

PROC PRINT;

PROC FREQ ORDER=FREQ DATA=WORK.A;
 TABLES SUPPRESS;

PROC FREQ ORDER=FREQ DATA=WORK.A;
 TABLES MSGID;

PROC FREQ ORDER=FREQ DATA=WORK.A;
 TABLES MSGID*SUPPRESS;
./ ADD NAME=SASTLMS  0100-89155-89155-1410-00168-00168-00000-JIMLANE
DATA TAPES.TAPES;
 INFILE VMF;
 INPUT    BASRVSCR $1.     /* SERVICE/SCRATCH INDICATOR              */
          BATYPE   $1.     /* RECORD TYPE                            */
          @;
 IF BATYPE¬='B' THEN DELETE;
 INPUT
          BAVSN    $6.     /* VOLUME SERIAL NUMBER                   */
          BAVOLSQ  PD2.    /* VOLUME SEQUENCE NUMBER                 */
          BAVOLCT  PD2.    /* VOLUME COUNT                           */
          BAFILECT IB2.    /* FILE COUNT                             */
          BAVSN1    $6.    /* MULTI-VOL 1ST VOLUME SERIAL NUMBER     */
          BAVSNL    IB4.   /* MULTI-VOL LAST CHAIN PTR               */
          BAMDS1    IB4.   /* MULTI-DATASET 1ST CHAIN PTR            */
          BAMDSL    IB4.   /* MULTI-DATASET LAST CHAIN PTR           */
          BAUNIQUE  IB4.   /* SORT UNIQUE CODE                       */
          BADEN     $1.    /* DENSITY                                */
          BATRTCH   $1.    /* TRACK RECORDING TECHNIQUE              */
          BALABEL   $1.    /* LABEL TYPE                             */
          RESV1     $1.    /* AVAILABLE                              */
          BAACTIVE  IB2.   /* ACTIVE FILE COUNT                      */
          BACDSSEQ  IB2.   /* CONTROLLING DATA SET SEQUENCE NUMBER   */
          BALOC     $2.    /* VOLUME LOCATION                        */
          BACCSS    $4.    /* BOX OR CABINET/SLOT                    */
          BAVMOVED  PD3.   /* DATE VOLUME MOVED                      */
          BAVKEEPD  PD3.   /* HIGHEST KEEP DATE ON VOLUME            */
          BAVEXPDT  PD3.   /* HIGHEST IBM EXPIRATION DATE ON         */
                           /* VOLUME                                 */
          BAVSCRDT  PD3.   /* DATE VOLUME SCRATCHED                  */
          BATLENTH  IB2.   /* TAPE LENGTH         (USER UPDATED)     */
          BAPURCH   PD3.   /* PURCHASE DATE       (USER UPDATED)     */
          BAMANU    $2.    /* MANUFACTURER CODE   (USER UPDATED)     */
          BATAPTYP  $2.    /* TAPE TYPE           (USER UPDATED)     */
          BALOST    $1.    /* LOST CODE           (USER UPDATED)     */
          BADAMAGE  $1.    /* DAMAGED CODE        (USER UPDATED)     */
          BADEST    $1.    /* DESTROYED CODE      (USER UPDATED)     */
          BADESTDT  PD3.   /* DESTROYED DATE      (USER UPDATED)     */
          RESV2     $15.   /* AVAILABLE                              */
          BACLUSES  IB2.   /* USES SINCE CLEANED                     */
          BACEUSES  IB2.   /* USES SINCE CERTIFIED                   */
          BATOUSES  IB2.   /* USES SINCE PURCHASED                   */
          BACURERG  IB2.   /* CURRENT ERASE GAPS ON VOLUME           */
          BAMAXERG  IB2.   /* MAX ERASE GAPS ON VOLUME               */
          BATMPRER  IB2.   /* CURRENT TEMPORARY READ ERRORS          */
          BACLNCT   IB2.   /* CLEANINGS SINCE CERTIFIED              */
          BACERTCT  IB2.   /* TOTAL CERTIFICATIONS                   */
          BACLNDT   PD3.   /* CLEAN DATE                             */
          BACERTDT  PD3.   /* CERTIFICATION DATE                     */
          BAMVLCNT  IB2.   /* COUNT OF VOLUMES IN BAMVLTAB           */
                           /* 5 OCCURRANCES OF MULTI-VOL INFO        */
          BAMVLVSN  $6.    /* VOLUME SERIAL NUMBER                   */
          BAMVLSEQ  IB2.   /* VOLUME SEQUENCE NUMBER                 */
          RESV3     $32.   /* REMAINDER OF BAMVLTAB                  */
          BAFILESQ  IB2.   /* FILE SEQUENCE NUMBER                   */
          BAABEND   $1.    /* ABEND STATUS                           */
          BACDSFLG  $1.    /* CONTROLLING DATA SET FLAG              */
          BADSN     $44.   /* DATA SET NAME                          */
          BACTIME   PD4.   /* CREATE TIME                            */
          BACDATE   PD3.   /* CREATE DATE                            */
          BACDRIVE  $3.    /* CREATE DRIVE                           */
          BACJOB    $8.    /* CREATE JOBNAME                         */
          BACSTEP   $8.    /* CREATE STEPNAME                        */
          BAIDATE   PD3.   /* INPUT DATE                             */
          BAIDRIVE  $3.    /* INPUT DRIVE                            */
          BAIJOB    $8.    /* INPUT JOBNAME                          */
          BABLKCT   IB4.   /* BLOCK COUNT                            */
          BALRECL   IB2.   /* LOGICAL RECORD LENGTH                  */
          BABLKSI   IB2.   /* BLOCK SIZE                             */
          BARECFM   $3.    /* RECORD FORMAT                          */
          BAJOBACC  $15.   /* JOB ACCOUNTING INFO (FROM IEFUJI)      */
          BADKEEPD  PD3.   /* TLMS II KEEP DATE FOR DATA SET         */
          BADEXPDT  PD3.   /* IBM EXPIRATION DATE FOR DATA SET       */
          BACPUID   $1.    /* CREATION CPU ID                        */
          BASPAN    $1.    /* SPANNED DATA SET FLAG (1 = SPANNED)    */
          BADRSRV1  $2.    /* RESERVED FOR FUTURE ENHANCEMENTS       */
          BADRSRV2  PD3.   /* RESERVED FOR FUTURE ENHANCEMENTS       */
          BADXPIRD  PD3.   /* DATE DATA SET EXPIRED                  */
  ;

 /*
PROC PRINT; ID BAVSN; VAR BAVKEEPD BADKEEPD BASRVSCR BADSN;
 */

DATA A;
 SET TAPES.TAPES;
 IF BASRVSCR='1';
 IF BALABEL=' ' THEN DELETE;
 IF SUBSTR(BAVSN,1,1)='0'
  | SUBSTR(BAVSN,1,1)='1';
 IF SUBSTR(BAVSN,1,1)='1'
 THEN DEVICE='3480';
 ELSE DEVICE='3420';
 IF DEVICE='3480';
 IF BAFILECT=1;
 TYPE='OTHER  ';
 SYSTEM='NONE';
 TTAPES=0;
 PTAPES=0;
 TAPES=1;
 IF BABLKCT>0
  & BABLKSI>0
 THEN DO;
  IF BALRECL = 0 THEN BALRECL = BABLKSI;
  IF BALRECL GT 23476
  THEN GOODBLK = 23476;
  ELSE GOODBLK = INT(23476/BALRECL) * BALRECL;
  D = INT(((GOODBLK + 12) / 32) + 1);
  BLTRK = INT(1499 / (D + 15));
  TRACKS = INT((BABLKCT / BLTRK)*(BABLKSI / GOODBLK) + 1);
 END;
 ELSE DELETE;
 IF SUBSTR(BADSN,4,1)='.'  & SUBSTR(BADSN,3,1)='P'
 THEN DO;
  TYPE='PROD';
  PTAPES=1;
  IF TRACKS <= 15 THEN DO;
   TOPROD=1;
   TODASD=1;
  END;
  ELSE DO;
   TOPROD=0;
   TODASD=0;
  END;
  SYSTEM=SUBSTR(BADSN,1,3);
 END;
 ELSE DO;
  TYPE='TEST';
  TTAPES=1;
  IF TRACKS <= 15 THEN DO;
   TOTEST=1;
   TODASD=1;
  END;
  ELSE DO;
   TOTEST=0;
   TODASD=0;
  END;
  SYSTEM='***';
 END;
 IF TRACKS > 15 THEN TRACKS=0;
 KEEP BABLKCT BABLKSI BALOC BAFILECT
 TTAPES PTAPES
 TRACKS
 TOTEST TOPROD TODASD
 DEVICE
 BACJOB
 SYSTEM TYPE TAPES BADSN BASRVSCR BACDATE     BALABEL BAVSN;


PROC SUMMARY DATA=WORK.A NWAY;
 CLASS SYSTEM;
 VAR TAPES TTAPES PTAPES TOTEST TOPROD TODASD TRACKS;
 OUTPUT OUT=S1 SUM= ;

PROC PRINT; ID SYSTEM;
 VAR TTAPES PTAPES TAPES TRACKS TOTEST TOPROD TODASD;
 SUM TTAPES PTAPES TAPES TRACKS TOTEST TOPROD TODASD;

DATA A;
 SET A;
 IF TOTEST=1 OR TOPROD=1;

PROC SORT; BY SYSTEM BADSN;

PROC PRINT; ID BADSN;
 VAR BABLKCT BABLKSI
 TRACKS
 BACJOB                           BACDATE     BALABEL BAVSN;
 BY SYSTEM;
