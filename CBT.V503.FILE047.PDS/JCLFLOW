><       ADD   NAME=$GENMSG
         MACRO
        $GENMSG  &M
&NDX     SETC  '&SYSNDX'
         CLC   M&M.LNO,=F'-4'       MSG NEEDED?
         BE    GENA&NDX             NO.
         L     R2,M&M.LNO           PICK UP HIGHEST OFFSET.
         LA    R2,4(0,R2)           PLUS 1
         SRL   R2,2                 DIVIDE BY 4. NUMBER TO INSERT
         LA    R3,M&M.LNO+4         1ST LINE NUMBER
GENB&NDX DS    0H
         L     R1,0(0,R3)           PICK UP LINE NUMBER.
         ST    R1,ADDLINE           SAVE AS INSERT POINT.
         ISREDIT 82,MSG&M
         LA    R3,4(0,R3)           SKIP TO NEXT LINE NUMBER.
         BCT   R2,GENB&NDX          COUNT OF NUMBER TO INSERT.
GENA&NDX DS    0H
         MEND
><       ADD   NAME=$NOTEMSG
         MACRO
        $NOTEMSG &M
&NDX     SETC  '&SYSNDX'
         L     R1,M&M.LNO           OFFSET INTO LINE NUMBER TBL
         LA    R1,4(0,R1)           GET NEXT ENTRY
         CH    R1,=Y(4*32)          TABLE FULL?
         BH    TBF&NDX              YES.
         L     R14,ADDLINE          PICK UP CURRENT INSERT POINT
         ST    R14,M&M.LNO+4(R1)    SAVE LINE# FOR MESSAGE INSERT
         ST    R1,M&M.LNO           SAVE UPDATED OFFSET.
TBF&NDX  DS    0H
         MEND
><       ADD   NAME=JCLFLOW
JCLFLOW  TITLE 'ISPF V2 EDIT MACRO TO REFORMAT AND CHECK JCL.'
***********************************************************************
*   THIS PROGRAM WAS "OBTAINED" FROM FILE352 OF THE CBT TAPE. IN      *
*   ITS ORIGINAL FORM IT WAS A BATCH UTILITY, READING JCL FROM        *
*   SYSUT1 AND WRITING THE REFORMATTED STUFF ONTO SYSUT2. I           *
*   CHANGED IT BY ALTERING THE I/O LOGIC TO USE ISPF EDIT MACRO       *
*   SERVICES. THE BASIC LOGIC IS TO START AT THE TOP OF THE DECK      *
*   ASSIGNING EACH LINE TO VARIABLE "CARD". ANYTHING OTHER THAN       *
*   PART OF A DD STATEMENT IS LEFT AS IS. WHEN A DD STATEMENT IS      *
*   FOUND EACH LINE IS DELETED AFTER BEING READ. THE LINE NUMBER      *
*   AFTER WHICH TO INSERT REFORMATTED JCL IS REMEMBERED IN            *
*   VARIABLE "ADDLINE". AN ENTIRE DD STATEMENT IS READ IN,            *
*   CONTINUATION LINES AND ALL AND STORED IN "TABLEIN", EACH INPUT    *
*   LINE BEING DELETED AFTER ASSIGNMENT. THE DD STATEMENT IS THEN     *
*   FORMATTED BY BEING COPIED ONE PARAMETER AT A TIME OVER TO         *
*   "TABLEOUT". FROM "TABLEOUT" NEW LINES ARE INSERTED INTO THE       *
*   DATASET TO CONTAIN THE REFORMATTED DD STATEMENT. SINCE THE        *
*   NUMBER OF LINES IN THE DATASET COULD HAVE INCREASED, THE LINE     *
*   NUMBER OF THE LAST LINE IS RE-CALCULATED AS NECESSARY AND         *
*   REMEMBERED IN VARIABLE "LLINE".                                   *
***********************************************************************
         EJECT ,
***********************************************************************
*                                                                     *
*    THE FOLLOWING MACROS ARE USED IN JCLFLOW:                        *
*                                                                     *
*        LOCAL MACROS:                                                *
*                                                                     *
*   $GENMSG    - INSERT MESSAGE LINES INTO THE DATASET.               *
*   $NOTEMSG   - UPDATE A TABLE OF LINE NUMBERS AFTER WHICH TO INSERT *
*                A MESSAGE LINE.                                      *
*                                                                     *
*        ISPF MACROS (FROM SOMEWHERE ON THE CBT TAPE):                *
*                                                                     *
*   ISPF                                                              *
*   ISREDIT                                                           *
*   VDEFINE                                                           *
*                                                                     *
*        REGISTER USAGE:                                              *
*                                                                     *
*  R0    UNUSED.                                                      *
*  R1    WORK REGISTER                                                *
*  R2    CURRENT POSITION WITHIN INPUT TEXT (TABLEIN)                 *
*  R3    LOOP COUNTER                                                 *
*  R4    CURRENT POSITION WITHIN OUTPUT AREA (TABLEOUT)               *
*        OR CURRENT ENTRY IN JCL PARAMETER TABLE.                     *
*  R5    WORK REGISTER                                                *
*  R6    WORK REGISTER                                                *
*  R7    LOOP CONTROL (BXLE)                                          *
*  R8    LOOP CONTROL (BXLE)                                          *
*  R9    LOOP CONTROL (BXLE)                                          *
*  R10   SUBROUTINE LINKAGE                                           *
*  R11   PROGRAM BASE REGISTER 1                                      *
*  R12   PROGRAM BASE REGISTER 2                                      *
*  R13   SAVE AREA BASE ADDRESS.                                      *
*  R14                                                                *
*  R15                                                                *
*                                                                     *
***********************************************************************
         EJECT ,
JCLFLOW CSECT                                                      @MLI
         PRINT NOGEN                                               @MLI
           SPACE 1
*  EQUATE THE GENERAL REGISTERS FOR XREF USE.
         SPACE 1
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SPACE 2
*  SET UP BASE REGISTERS AND SAVE AREA POINTERS
         SPACE 1
         STM   R14,R12,12(R13)
         LR    R11,R15
         USING JCLFLOW,R11,R12
         LA    R12,4095(R11)
         LA    R12,1(R12)
         ST    R13,SAVEAREA+4
         LR    R4,R13
         LA    R13,SAVEAREA
         ST    R13,8(R4)
         ISPF  LOAD                                                @MLI
         ISREDIT ,'MACRO '                                         @MLI
         ISREDIT ,'RESET '                                         @MLI
         VDEFINE '(CARD)',CARD,CHAR,80                             @MLI
         VDEFINE '(LINENO)',LINENO,FIXED,4                         @MLI
         VDEFINE '(LLINE)',LLINE,FIXED,4                           @MLI
         VDEFINE '(ADDLINE)',ADDLINE,FIXED,4                       @MLI
         ISREDIT ,'(LLINE) = LINENUM .ZLAST '                      @MLI
         MVC   LINENO,=F'0'                                        @MLI
         MVC   ADDLINE,=F'0'        INSERT AFTER ZERO TO START.    @MLI
         EJECT
**  MAINLINE OF THE PROGRAM -- BEGIN PROCESSING DATA.
         SPACE 2
GETUT1   DS    0H
         L     R1,ADDLINE           GET NUMBER OF LAST INSERT.     @MLI
         LA    R1,1(0,R1)           PLUS 1.                        @MLI
         ST    R1,LINENO            GET NEXT NEW LINE.             @MLI
         CLC   LINENO,LLINE            END OF FILE ON INPUT?       @MLI
         BH    ENDOFJOB                YES, GO TO END OF JOB.
         SPACE 1
         ISREDIT ,'(CARD) = LINE &&LINENO '                        @MLI
         CLC   CARD(2),=CL2'//'
         BNE   GETUT1A                                             @MLI
         SPACE 1
         CLC   CARD(3),=CL3'//*'
         BE    GETUT1A                                             @MLI
         B     GETUT1B              PROCESS THIS ONE.              @MLI
GETUT1A  DS    0H                                                  @MLI
         L     R1,ADDLINE           GET NUMBER OF LAST INSERT      @MLI
         LA    R1,1(0,R1)           PLUS 1.                        @MLI
         ST    R1,ADDLINE           AND SAVE IT.                   @MLI
         CLC   ADDLINE,LLINE        DOES IT LOOK LIKE THE BOTTOM   @MLI
         BL    GETUT1               NO. NEXT LINE.                 @MLI
         ISREDIT ,'(LLINE) = LINENUM .ZLAST '                      @MLI
         B     GETUT1               TRY NEXT LINE.                 @MLI
GETUT1B  DS    0H                                                  @MLI
         ISREDIT ,'DELETE &&LINENO '                               @MLI
         SPACE 1
         CLC   CARD+2(69),INITOUT+2
         BE    ALLDONE
         SPACE 1
         LA    R2,20
         LA    R3,CARD+3
         SPACE 1
COMPARES CLC   0(5,R3),=CL5' JOB '
         BE    JOBCARD
         SPACE 1
         CLC   0(6,R3),=CL6' EXEC '
         BE    EXECARD
         SPACE 1
         CLC   0(4,R3),=CL4' DD '
         BE    DDCARD
         SPACE 1
         LA    R3,1(R3)
         BCT   R2,COMPARES
         SPACE 2
ALLDONE  MVC   CARD+72(8),INITOUT+2
NOTJCL   DS    0H
         BAL   R10,PUTUT2
         B     GETUT1
         EJECT
JOBCARD  B     ALLDONE
         SPACE 2
EXECARD  B     ALLDONE
         EJECT
DDCARD   MVC   0(4,R3),=CL4'    '
         SPACE 1
         LA    R2,25
         L     R3,=AL4(TABLEIN)
         L     R4,=AL4(TABLEOUT)
INITLOOP MVC   0(80,R3),INITIN      SET INPUT WORKAREA TO HEX FF'S
         MVC   0(80,R4),INITOUT     SET OUTPUT WORKAREA TO '// '
         LA    R3,80(R3)
         LA    R4,80(R4)
         BCT   R2,INITLOOP
         SPACE 1
         MVC   CARD(2),INITOUT+2    BLANK OUT // FROM INPUT
         MVC   CARD+72(8),INITOUT+2 BLANK OUT SEQ# FROM INPUT
         L     R3,=AL4(TABLEIN)
         MVC   0(80,R3),CARD        MOVE JCL CARD TO INPUT WORKAREA
         L     R4,=AL4(TABLEOUT)
         MVC   11(2,R4),=CL2'DD'
         SPACE 1
         BAL   R10,FINELOAD         LOAD ANY CONTINUATION CARDS.
         SPACE 1
         L     R2,=AL4(TABLEIN+2)
         L     R3,=AL4(TABLEOUT+2)
         LA    R4,8
DDNAMEMV CLI   0(R2),C' '
         BE    DDNAMOVR
         MVC   0(1,R3),0(R2)        MOVE 1 CHAR OF DDNAME TO OUTPUT
         MVI   0(R2),C' '
         LA    R2,1(R2)
         LA    R3,1(R3)
         BCT   R4,DDNAMEMV
         EJECT
DDNAMOVR L     R6,=AL4(TABLEIN)
         ST    R6,CURENTRY          SAVE ADDR OF CURRENT INPUT RECORD
         SPACE 1
         LA    R6,72
         ST    R6,COUNT             SAVE COUNTS OF COLUMNS TO SEARCH
         SPACE 1
GOAGAIN  MVC   NOPX+1(1),=X'F0'
         L     R2,CURENTRY          RECORD TO SEARCH IN R2
         L     R3,COUNT             COLUMNS TO SEARCH IN R3
         BAL   R10,SEARCH           FIND A JCL PARAMETER, IF POSSIBLE
         CLI   HITSW,C'0'           WAS THERE ONE?
         BE    NEWENTRY             NO. WRITE OUT A NON-JCL RECORD
         SPACE 1
CONTINUE MVC   OUTADDR(4),0(R4)     SAVE ADDR IN TABLEOUT TO STORE PARM
         ST    R2,START             SAVE START OF POSSIBLE NEXT PARM.
         MVC   NOPX+1(1),=X'00'
         LA    R2,1(R2)             DON'T RE-FIND THE SAME PARM
         BCTR  R3,0                 WHICH MEANS 1 FEWER COLUMNS TO SCAN
         BAL   R10,SEARCH           RESUME SCAN OF INPUT RECORD.
         CLI   HITSW,C'0'           ANOTHER PARAMETER OR END OF CARD?
         BE    NEWENTRY             NO. GOTO NEXT STATEMENT.
         ST    R2,STOP              SAVE END OF PREVIOUS PARAMETER.
         SPACE 1
         L     R9,START             START OF PARAMETER TEXT.
         L     R10,STOP             END OF PARAMETER TEXT.
         SR    R10,R9               END MINUS START.
         BCTR  R10,0                MINUS 1 IS LENGTH TO MOVE.
         L     R9,OUTADDR           PICK UP PLACE TO SAVE IN TABLEOUT.
         STC   R10,MOVEPARM+1       SET LENGTH TO SAVE TEXT.
         STC   R10,CLEARPRM+1       SET LENGTH TO CLEAR INPUT.
         STC   R10,78(R9)           SAVE LENGTH IN OUTPUT AREA
         L     R10,START            PICK UP START OF TEXT IN INPUT.
         SPACE 1
MOVEPARM MVC   15(0,R9),0(R10)      SAVE IN TABLEOUT.
CLEARPRM MVC   0(0,R10),INITOUT+2   BLANK OUT EQUIVALENT IN TABEIN.
         MVI   79(R9),C'X'          FLAG THAT ONE AS GOOD.
         CLI   EODCSW,C'1'          ANYTHING MORE ON INPUT?
         BNE   CONTINUE             YES, GO DO IT.
         MVI   EODCSW,C'0'
         SPACE 1
         LR    R7,R10
         BAL   R10,SAVECMNT
         SPACE 1
NEWENTRY L     R6,CURENTRY
         LA    R6,80(R6)
         CLC   0(80,R6),INITIN
         BE    WRITEIT
         ST    R6,CURENTRY
         B     GOAGAIN
         EJECT
WRITEIT  LA    R3,25
         L     R4,=AL4(TABLEOUT)
         MVC   CARDSAVE,CARD
         SPACE 1
         BAL   R10,LASTLOOK
         BAL   R10,ADCOMMAS
         BAL   R10,ADCOMNTS
         SPACE 1
         L     R1,=AL4(TABLEOUT)
         CLI   79(R1),C'X'
         BE    WRITLOOP
         MVC   SLOTSAVE(11),2(R1)
         MVC   BYSLOT+1(1),=XL1'00'
         SPACE 1
WRITLOOP MVC   CARD(80),0(R4)
         CLI   CARD+79,C'X'
         BNE   BUMPWRIT
         SPACE 1
BYSLOT   B     BLANKX
         MVC   CARD+2(11),SLOTSAVE
         MVC   BYSLOT+1(1),=XL1'F0'
BLANKX   MVC   CARD+78(2),INITOUT+2
         BAL   R10,PUTUT2
BUMPWRIT LA    R4,80(R4)
         BCT   R3,WRITLOOP
         SPACE 2
         CLI   ECSW,C'1'
         BNE   WITEXIT
         MVI   ECSW,C' '
         MVC   CARD,ECARD
         BAL   R10,PUTUT2
         SPACE 1
WITEXIT  MVC   SLOTSAVE(11),INITOUT+2
         MVC   CARD,CARDSAVE
         CLI   EOFUT1,C'1'
         BE    ENDOFJOB
         B     GETUT1                                              @MLI
         EJECT
EODUT1   MVI   EOFUT1,C'1'
         SPACE 1
         CLI   FINEON,C'1'
         BE    FINERTRN
         SPACE 2
ENDOFJOB LA    R15,0
ABORT    DS    0H
        $GENMSG 1                                                  @MLI
        $GENMSG 2                                                  @MLI
        $GENMSG 3                                                  @MLI
        $GENMSG 4                                                  @MLI
         ISPF  DELETE                                              @MLI
         L     R13,4(R13)
         L     R14,12(13,0)
         LM    R0,R12,20(13)
         BR    R14
         EJECT
*  SUBROUTINE TO FINISH LOAD OF THE INPUT TABLE
         SPACE 2
FINELOAD ST    R10,FINESAVE
         MVI   FINEON,C'1'
         SPACE 1
         L     R7,=AL4(TABLEIN)     DD CARD BEING SCANNED.         @MLI
         LA    R8,1                 ONE COLUME AT A TIME.          @MLI
         L     R9,=AL4(TABLEIN+70)  LAST COLUMN FOR ', '           @MLI
         CLC   0(2,R7),=C', '       CONTINUATION INDICATED?        @MLI
         BE    *+12                 YES, READ IN MORE              @MLI
         BXLE  R7,R8,*-10           SCAN ENTIRE CARD.              @MLI
         B     FINERTRN             NO CONT.                       @MLI
         SPACE 1
         LA    R8,24
         L     R9,=AL4(TABLEIN+80)
         SPACE 1
FINEGET  DS    0H
         CLC   LINENO,LLINE         ANY MORE DATA LINES?           @MLI
         BH    FINERTRN             NO                             @MLI
         ISREDIT ,'(CARD) = LINE &&LINENO '                        @MLI
         ISREDIT ,'DELETE &&LINENO '                               @MLI
         SPACE 1
         BAL   R10,CHECKER
         SPACE 1
         MVC   CARD(2),=CL2' '
         MVC   CARD+72(8),=CL8' '
         MVC   0(80,R9),CARD
         SPACE 1
         CLI   MOREDD,C'0'          END OF THIS DD STATEMENT?      @MLI
         BE    FINERTRN             YES.                           @MLI
         LA    R9,80(R9)
         BCT   R8,FINEGET
         SPACE 1
FINERTRN MVI   FINEON,C'0'
         L     R10,FINESAVE
         BR    R10
         EJECT
*  ROUTINE TO CHECK FOR CONTINUATION CARDS OF A DD CARD.
         SPACE 2
CHECKER  CLC   CARD(3),=CL3'//*'
         BE    NOMODD
         SPACE 1
         CLC   CARD(2),=CL2'//'
         BNE   NOMODD
         SPACE 1
         CLC   CARD+2(14),INITOUT+2
         BE    NOMODD
         SPACE 1
         LA    R2,CARD+2
         LA    R3,68                CONTINUATION COULD BE 3-70     @MLI
CHKLOOP  DS    0H
         CLC   0(2,R2),=CL2', '     CONTINUATION                   @MLI
         BE    MODD                 YES. MORE TO THIS DD.          @MLI
         LA    R2,1(R2)
         BCT   R3,CHKLOOP
         SPACE 1
NOMODD   MVI   MOREDD,C'0'
         BR    R10
MODD     MVI   MOREDD,C'1'                                         @MLI
         BR    R10
         EJECT
*  ROUTINE TO SEARCH FOR PARAMETERS IN A DD CARD.
*  SET R2 TO START OF DD STATEMENT PARAMETER TEXT
*  SET R4 TO CORRESPONDING ENTRY IN "TABLE".
         SPACE 2
SEARCH   LA    R4,TABLE
         SR    R5,R5
         IC    R5,PTABCNT
         MVI   HITSW,C'0'
         SPACE 1
SETLEN   MVC   COMPARE+1(1),4(R4)
         CLI   0(R2),X'7D'
         BE    QUOTE
COMPARE  CLC   0(0,R2),5(R4)
         BE    HIT
         SPACE 1
NOPX     NOP   BUMP
         CLI   0(R2),C' '
         BE    EODCARD
         SPACE 1
BUMP     LA    R4,25(R4)
         BCT   R5,SETLEN
         SPACE 1
BUMP2    LA    R2,1(R2)
         BCT   R3,SEARCH
         SPACE 1
         BR    R10
HIT      MVI   HITSW,C'1'
         BR    R10
EODCARD  MVI   EODCSW,C'1'
         BE    HIT
         SPACE 2
QUOTELUP CLI   0(R2),X'7D'
         BE    BUMP2
QUOTE    LA    R2,1(R2)
         BCT   R3,QUOTELUP
         B     EODCARD
         EJECT
*  ROUTINE TO MARK INPUT AREA FOR SAVING COMMENTS.
         SPACE 1
SAVECMNT SR    R4,R4
         IC    R4,78(R9)
         AR    R7,R4
         LA    R7,1(R7)
         LR    R4,R3
         BCTR  R4,0
         STC   R4,BCOMPR+1
BCOMPR   CLC   0(0,R7),INITOUT+2
         BE    SCEXIT
         SPACE 1
         L     R5,CURENTRY
         MVI   0(R5),C'C'
         SPACE 1
SCEXIT   BR    R10
         EJECT
*  ROUTINE TO SCAN OUTPUT AREA AND INSERT COMMAS WHERE NECESSARY
         SPACE 1
ADCOMMAS CLI   79(R4),C'X'
         BNE   ADCBUMP
         SPACE 1
         CLC   15(3,R4),=CL3'DCB'
         BNE   ADCCONT
         CLI   ECSW,C'1'
         BNE   ADCCONT
         MVC   ADCMVCOM+1(1),=XL1'6B'
ADCCONT  LR    R5,R4
         LA    R5,15(R5)
         SR    R6,R6
         IC    R6,78(R4)
         LA    R6,1(R6)
         AR    R5,R6
         CLI   0(R5),C','
         BE    ADCBUMP
         BCTR  R5,0
         CLI   0(R5),C','
         BE    ADCBUMP
         LA    R5,1(R5)
         MVI   0(R5),C','
         SPACE 1
ADCBUMP  LA    R4,80(R4)
         LR    R7,R5
         BCT   R3,ADCOMMAS
         SPACE 1
ADCMVCOM MVI   0(R7),C' '
         LA    R3,25
         L     R4,=AL4(TABLEOUT)
         MVC   ADCMVCOM+1(1),=XL1'40'
         BR    R10
         EJECT
*  ROUTINE TO MOVE COMMENTS FROM INPUT AREA TO OUTPUT AREA
         SPACE 1
ADCOMNTS L     R5,=AL4(TABLEIN)
         LA    R6,25
CLIC     CLI   0(R5),C'C'
         BE    COMPUTE
ADCBUMP2 LA    R5,80(R5)
         BCT   R6,CLIC
         B     INCMNTS
         SPACE 1
COMPUTE  LA    R7,71
         LR    R3,R5
         LA    R3,1(R3)
CLIBLANK CLI   0(R3),C' '
         BNE   CMNTSTRT
         LA    R3,1(R3)
         BCT   R7,CLIBLANK
         MVI   0(R5),C' '
         B     ADCBUMP2
         SPACE 1
CMNTSTRT ST    R3,FULLWORD
         MVC   1(4,R5),FULLWORD
         LR    R3,R5
         LA    R3,71(R3)
CLIBLNK2 CLI   0(R3),C' '
         BNE   CMNTEND
         BCTR  R3,0
         BCT   R7,CLIBLNK2
         MVI   0(R5),C' '
         B     ADCBUMP2
         SPACE 1
CMNTEND  STC   R7,5(R5)
         B     ADCBUMP2
         SPACE 1
INCMNTS  L     R5,=AL4(TABLEIN)
         LA    R6,25
INCSCLIC CLI   0(R5),C'C'
         BE    INSERT
INCSBUMP LA    R5,80(R5)
         BCT   R6,INCSCLIC
         B     ADCEXIT
         EJECT
INSERT   MVC   FULLWORD,1(R5)
         L     R1,FULLWORD
         MVC   MVCX+1(1),5(R5)
         MVC   MVCY+1(1),5(R5)
         LR    R7,R4
         SR    R15,R15
         IC    R15,5(R5)
         SR    R7,R15
         SH    R7,=H'9'
         LA    R7,80(R7)
         CLI   0(R7),C' '
         BE    MVCX
         LA    R4,80(R4)
         B     INSERT
MVCX     MVC   0(0,R7),0(R1)
MVCY     MVC   0(0,R1),INITOUT+2
         MVC   0(6,R5),INITOUT+2
BUMP4    LA    R4,80(R4)
         B     INCSBUMP
         SPACE 1
ADCEXIT  LA    R3,25
         L     R4,=AL4(TABLEOUT)
         BR    R10
         EJECT
*  ROUTINE TO CHECK INPUT AREA FOR ANY DATA LEFT.
         SPACE 2
LASTLOOK CLI   DCBSW,C'1'
         BNE   LLEXIT
         L     R4,=AL4(TABLEIN)
         SPACE 1
LLGOON   CLC   0(72,R4),INITOUT+2
         BNE   CHKITOUT
LLBUMP   LA    R4,80(R4)
         BCT   R3,LLGOON
         SPACE 1
LLEXIT   LA    R3,25
         L     R4,=AL4(TABLEOUT)
         BR    R10
         SPACE 1
CHKITOUT MVC   CARD(80),0(R4)
         LA    R5,72
         LA    R6,CARD
CIOCLI   CLI   0(R6),C' '
         BNE   CIOCOMP
         LA    R6,1(R6)
         BCT   R5,CIOCLI
         B     LLBUMP
         SPACE 1
CIOCOMP  LA    R5,DCBTABL
         LA    R7,14                REMOVED WEIRD DCB OPTIONS      @MLI
MVCCLID  MVC   CLIDCB+1(1),0(R5)
CLIDCB   CLC   1(0,R5),0(R6)
         BE    DCBCONT
         LA    R5,9(R5)
         BCT   R7,MVCCLID
         B     LLBUMP
         SPACE 1
DCBCONT  MVC   ECARD(80),INITOUT
         MVC   ECARD+15(55),0(R6)
         MVI   ECSW,C'1'
         B     LLBUMP
         EJECT
PUTUT2   DS    0H
         CLC   CARD+15(6),=C'SPACE=' SPACE PARAMETER?              @MLI
         BNE   PUTUT2A              NO.                            @MLI
         L     R1,=AL4(TABLEOUT)    ADDR OF DSN= (MAYBE).          @MLI
         CLC   15(4,R1),=C'DSN='    DSN PARAMETER?                 @MLI
         BNE   PUTUT2A              NO. MUST BE TEMP.              @MLI
         CLI   19(R1),C'&&'         TEMP NAME?                     @MLI
         BE    PUTUT2A              YES. LEAVE THEM.               @MLI
         CLI   CARD+22,C'0'         QUANTITY IN BLOCKS?            @MLI
         BNL   PUTUT2A              THAT'S GOOD.                   @MLI
        $NOTEMSG 1                                                 @MLI
         LA    R7,CARD+21           START OF SPACE SUBPARMS        @MLI
         LA    R8,1                 1 COLUMN AT A TIME             @MLI
         LA    R9,CARD+71           LAST VALID COLUMN              @MLI
PUTUT20  CLC   0(5,R7),=C',RLSE'    RLSE PARAMETER?                @MLI
         BE    PUTUT2A              GOOD FOR YOU.                  @MLI
         BXLE  R7,R8,PUTUT20        SCAN REST OF INPUT.            @MLI
        $NOTEMSG 4                                                 @MLI
PUTUT2A  DS    0H                                                  @MLI
         CLC   CARD+15(4),=C'DCB='  DCB PARAMETER   ?              @MLI
         BNE   PUTUT2B              NO.                            @MLI
         L     R1,=AL4(TABLEOUT)    ADDR OF DSN= (MAYBE).          @MLI
         CLC   15(4,R1),=C'DSN='    DSN PARAMETER?                 @MLI
         BNE   PUTUT2B              IGNORE BAD DCB FOR DUMMY ETC.  @MLI
         LA    R7,CARD+19           START OF DCB SUBPARAMETERS     @MLI
         LA    R8,1                 1 COLUMN AT A TIME             @MLI
         LA    R9,CARD+71           LAST VALID COLUMN              @MLI
PUTUT2AA CLC   0(8,R7),=C'BLKSIZE=' BLKSIZE PARM.                  @MLI
         BE    PUTUT2AB             YES                            @MLI
         BXLE  R7,R8,PUTUT2AA       SCAN OVER CARD.                @MLI
         B     PUTUT2B              BLKSIZE= NOT MANDATORY.        @MLI
PUTUT2AB DS    0H
         LA    R7,8(0,R7)           SKIP OVER BLKSIZE=             @MLI
         LR    R1,R7                SAVE START OF BLKSIZE VALUE    @MLI
PUTUT2AC CLI   0(R7),C','           END OF BLKSIZE VALUE           @MLI
         BE    PUTUT2AD             YES.                           @MLI
         CLI   0(R7),C' '           BLANK IS THE END ALSO          @MLI
         BE    PUTUT2AD             YES.                           @MLI
         CLI   0(R7),C')'           OR MAYBE A CLOSE BRACKET.      @MLI
         BE    PUTUT2AD             YES.                           @MLI
         BXLE  R7,R8,PUTUT2AC       SCAN UNTIL END OF BLKSIZE      @MLI
         B     PUTUT2B              QUIT IF IT LOOKS WEIRD.        @MLI
PUTUT2AD DS    0H
         SR    R7,R1                R7 = LENGTH OF BLKSIZE VALUE   @MLI
         BCTR  R7,0                 MINUS 1 FOR EXECUTE            @MLI
         B     *+10                 SKIP OVER EXECUTED INSTR       @MLI
         PACK  DOUBLE,0(0,R1)       (EXECUTED)                     @MLI
         EX    R7,*-6               PACK BLKSIZE VALUE             @MLI
         CVB   R7,DOUBLE            PICK UP BLOCK SIZE             @MLI
         CH    R7,=H'15000'         COMPARE TO ARBITRARY SIZE      @MLI
         BH    PUTUT2B              BIG IS GOOD.                   @MLI
        $NOTEMSG 2                                                 @MLI
PUTUT2B  DS    0H                                                  @MLI
         CLC   CARD+15(6),=C'DISP=(' DISP PARAMETER ?              @MLI
         BNE   PUTUT2C              NO.                            @MLI
         LA    R7,CARD+21           START OF DCB SUBPARAMETERS     @MLI
         LA    R8,1                 1 COLUMN AT A TIME             @MLI
         LA    R9,CARD+71           LAST VALID COLUMN              @MLI
PUTUT2BA CLC   0(11,R7),=C',CATLG,KEEP' BAD DISP                   @MLI
         BE    PUTUT2BB             YES.                           @MLI
         BXLE  R7,R8,PUTUT2BA       SCAN REMAINDER OF RECORD       @MLI
         B     PUTUT2C              NO NEWS IS GOOD NEWS.          @MLI
PUTUT2BB DS    0H                                                  @MLI
        $NOTEMSG 3                                                 @MLI
PUTUT2C  DS    0H
* INSERT A REFORMATTED LINE FROM VARIABLE CARD.
* ADDLINE IS THE LINE# OF THE LAST REFORMATTED LINE, THAT IS THE LINE
* AFTER WHICH TO INSERT NEW STUFF.  SINCE THIS LOGIC MAY HAVE CHANGED
* THE NUMBER OF LINES IN THE DATASET, LLINE MUST BE RESET, IF WE SEEM
* TO BE AT THE BOTTOM.
         SPACE 1
         ISREDIT ,'LINE_AFTER &&ADDLINE = (CARD) '
         L     R1,ADDLINE           PICK OLD INSERT POINT.         @MLI
         LA    R1,1(0,R1)           PLUS 1.                        @MLI
         ST    R1,ADDLINE           NEXT INSERT AFTER THE LAST.    @MLI
         CLC   ADDLINE,LLINE        DOES IT LOOK LIKE THE BOTTOM   @MLI
         BLR   R10                  NO. GOBACK.                    @MLI
         ISREDIT ,'(LLINE) = LINENUM .ZLAST '                      @MLI
         SPACE 1
UT2RET   BR    R10
         EJECT
SAVEAREA DS    18F
         SPACE 1
         ISPF  PARMS                                               @MLI
         SPACE 1
FINESAVE DS    F
OUTADDR  DS    F
CURENTRY DS    F
NXTENTRY DS    F
COUNT    DS    F
START    DS    F
STOP     DS    F
         SPACE 1
LINENO   DS    F                    CURRENT LINE NUMBER            @MLI
LLINE    DS    F                    LAST LINE.                     @MLI
ADDLINE  DS    F                    LINE AFTER WHICH TO INSERT.    @MLI
FULLWORD DS    F
DOUBLE   DS    D
         SPACE 1
PRNT1SW  DC    XL1'00'
PRNT2SW  DC    XL1'00'
UT2SW    DC    XL1'00'
FINEON   DC    C'0'
MOREDD   DC    C'0'
EOFUT1   DC    C'0'
HITSW    DC    C'0'
EODCSW   DC    C'0'
DCBSW    DC    C'1'
ECSW     DC    C' '
PTABCNT  DC    AL1(15)              COUNT OF ENTRIES IN "TABLE"    @MLI
         SPACE 1
MSG1     DC    CL82'LINE_AFTER &&ADDLINE = MSGLINE '' SPACE SHOULD BE AX
               LLOCATED IN BLOCKS.'''                              @MLI
M1LNO    DC    F'-4',32F'0'                                        @MLI
MSG2     DC    CL82'LINE_AFTER &&ADDLINE = MSGLINE '' BLOCK SIZE IS TOOX
                SMALL.'''                                          @MLI
M2LNO    DC    F'-4',32F'0'                                        @MLI
MSG3     DC    CL82'LINE_AFTER &&ADDLINE = MSGLINE '' USE DISP=(,CATLG,X
               DELETE) NOT DISP=(,CATLG,KEEP).'''                  @MLI
M3LNO    DC    F'-4',32F'0'                                        @MLI
MSG4     DC    CL82'LINE_AFTER &&ADDLINE = MSGLINE '' THE "RLSE" PARAMEX
               TER SHOULD BE USED.'''                              @MLI
M4LNO    DC    F'-4',32F'0'                                        @MLI
         SPACE 1
INITIN   DC    80XL1'FF'
INITOUT  DC    CL2'//'
         DC    CL78' '
         SPACE 1
CARD     DS    CL80
         DC    CL40' '
CARDSAVE DS    CL80
ECARD    DS    CL80
         DC    CL40' '      SAFETY FILLER
         SPACE 1
SLOTSAVE DC    CL11' '
         SPACE 1
         LTORG
         SPACE 1
DCBTABL  DC    XL1'4',CL8'BFTEK   '
         DC    XL1'6',CL8'BLKSIZE '
         DC    XL1'4',CL8'BUFNO   '
         DC    XL1'2',CL8'DEN     '
         DC    XL1'4',CL8'DSORG   '
         DC    XL1'4',CL8'EROPT   '
         DC    XL1'3',CL8'FUNC    '
         DC    XL1'5',CL8'KEYLEN  '
         DC    XL1'4',CL8'LIMCT   '
         DC    XL1'4',CL8'LRECL   '
         DC    XL1'2',CL8'NCP     '
         DC    XL1'4',CL8'OPTCD   '
         DC    XL1'4',CL8'RECFM   '
         DC    XL1'2',CL8'RKP     '
         SPACE 2
*ABLE    DS    25CL25                                              @MLI
TABLE    DS    0H                                                  @MLI
         DC AL4(TABLEOUT+000),AL1(003),CL20'DSN=      '            @MLI
         DC AL4(TABLEOUT+000),AL1(005),CL20' DATA     '            @MLI
         DC AL4(TABLEOUT+000),AL1(001),CL20' *        '            @MLI
         DC AL4(TABLEOUT+000),AL1(006),CL20'SYSOUT=   '            @MLI
         DC AL4(TABLEOUT+000),AL1(004),CL20'DUMMY     '            @MLI
         DC AL4(TABLEOUT+080),AL1(004),CL20'DISP=     '            @MLI
         DC AL4(TABLEOUT+160),AL1(004),CL20'UNIT=     '            @MLI
         DC AL4(TABLEOUT+240),AL1(005),CL20'SPACE=    '            @MLI
         DC AL4(TABLEOUT+320),AL1(005),CL20'LABEL=    '            @MLI
         DC AL4(TABLEOUT+400),AL1(003),CL20'VOL=      '            @MLI
         DC AL4(TABLEOUT+480),AL1(003),CL20'AMP=      '            @MLI
         DC AL4(TABLEOUT+560),AL1(006),CL20'COPIES=   '            @MLI
         DC AL4(TABLEOUT+640),AL1(003),CL20'FCB=      '            @MLI
         DC AL4(TABLEOUT+720),AL1(005),CL20'CHARS=    '            @MLI
         DC AL4(TABLEOUT+1920),AL1(003),CL20'DCB=      '           @MLI
TABLEIN  DS    25CL80
TABLEOUT DS    25CL80
         SPACE 1
         END
